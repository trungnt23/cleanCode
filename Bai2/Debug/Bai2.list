
Bai2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001760  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080018f4  080018f4  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080018f4  080018f4  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  080018f4  080018f4  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018f4  080018f4  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018f4  080018f4  000118f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018f8  080018f8  000118f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080018fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000024  08001920  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08001920  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ecd  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013f9  00000000  00000000  00026f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  00028320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007d0  00000000  00000000  00028ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000bfa5  00000000  00000000  00029378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006692  00000000  00000000  0003531d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00043ae6  00000000  00000000  0003b9af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007f495  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000249c  00000000  00000000  0007f4e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000024 	.word	0x20000024
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080018dc 	.word	0x080018dc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000028 	.word	0x20000028
 80001d0:	080018dc 	.word	0x080018dc

080001d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d8:	4b16      	ldr	r3, [pc, #88]	; (8000234 <SystemInit+0x60>)
 80001da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001de:	4a15      	ldr	r2, [pc, #84]	; (8000234 <SystemInit+0x60>)
 80001e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001e8:	4b13      	ldr	r3, [pc, #76]	; (8000238 <SystemInit+0x64>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a12      	ldr	r2, [pc, #72]	; (8000238 <SystemInit+0x64>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001f4:	4b10      	ldr	r3, [pc, #64]	; (8000238 <SystemInit+0x64>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001fa:	4b0f      	ldr	r3, [pc, #60]	; (8000238 <SystemInit+0x64>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a0e      	ldr	r2, [pc, #56]	; (8000238 <SystemInit+0x64>)
 8000200:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000208:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800020a:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <SystemInit+0x64>)
 800020c:	4a0b      	ldr	r2, [pc, #44]	; (800023c <SystemInit+0x68>)
 800020e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000210:	4b09      	ldr	r3, [pc, #36]	; (8000238 <SystemInit+0x64>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a08      	ldr	r2, [pc, #32]	; (8000238 <SystemInit+0x64>)
 8000216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800021a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <SystemInit+0x64>)
 800021e:	2200      	movs	r2, #0
 8000220:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000222:	f000 f88f 	bl	8000344 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <SystemInit+0x60>)
 8000228:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800022c:	609a      	str	r2, [r3, #8]
#endif
}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	e000ed00 	.word	0xe000ed00
 8000238:	40023800 	.word	0x40023800
 800023c:	24003010 	.word	0x24003010

08000240 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000240:	b480      	push	{r7}
 8000242:	b087      	sub	sp, #28
 8000244:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000246:	2300      	movs	r3, #0
 8000248:	613b      	str	r3, [r7, #16]
 800024a:	2300      	movs	r3, #0
 800024c:	617b      	str	r3, [r7, #20]
 800024e:	2302      	movs	r3, #2
 8000250:	60fb      	str	r3, [r7, #12]
 8000252:	2300      	movs	r3, #0
 8000254:	60bb      	str	r3, [r7, #8]
 8000256:	2302      	movs	r3, #2
 8000258:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800025a:	4b35      	ldr	r3, [pc, #212]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 800025c:	689b      	ldr	r3, [r3, #8]
 800025e:	f003 030c 	and.w	r3, r3, #12
 8000262:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000264:	693b      	ldr	r3, [r7, #16]
 8000266:	2b08      	cmp	r3, #8
 8000268:	d011      	beq.n	800028e <SystemCoreClockUpdate+0x4e>
 800026a:	693b      	ldr	r3, [r7, #16]
 800026c:	2b08      	cmp	r3, #8
 800026e:	d844      	bhi.n	80002fa <SystemCoreClockUpdate+0xba>
 8000270:	693b      	ldr	r3, [r7, #16]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d003      	beq.n	800027e <SystemCoreClockUpdate+0x3e>
 8000276:	693b      	ldr	r3, [r7, #16]
 8000278:	2b04      	cmp	r3, #4
 800027a:	d004      	beq.n	8000286 <SystemCoreClockUpdate+0x46>
 800027c:	e03d      	b.n	80002fa <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800027e:	4b2d      	ldr	r3, [pc, #180]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000280:	4a2d      	ldr	r2, [pc, #180]	; (8000338 <SystemCoreClockUpdate+0xf8>)
 8000282:	601a      	str	r2, [r3, #0]
      break;
 8000284:	e03d      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000286:	4b2b      	ldr	r3, [pc, #172]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000288:	4a2c      	ldr	r2, [pc, #176]	; (800033c <SystemCoreClockUpdate+0xfc>)
 800028a:	601a      	str	r2, [r3, #0]
      break;
 800028c:	e039      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800028e:	4b28      	ldr	r3, [pc, #160]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	0d9b      	lsrs	r3, r3, #22
 8000294:	f003 0301 	and.w	r3, r3, #1
 8000298:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800029a:	4b25      	ldr	r3, [pc, #148]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002a2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d00c      	beq.n	80002c4 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002aa:	4a24      	ldr	r2, [pc, #144]	; (800033c <SystemCoreClockUpdate+0xfc>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80002b2:	4a1f      	ldr	r2, [pc, #124]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 80002b4:	6852      	ldr	r2, [r2, #4]
 80002b6:	0992      	lsrs	r2, r2, #6
 80002b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002bc:	fb02 f303 	mul.w	r3, r2, r3
 80002c0:	617b      	str	r3, [r7, #20]
 80002c2:	e00b      	b.n	80002dc <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002c4:	4a1c      	ldr	r2, [pc, #112]	; (8000338 <SystemCoreClockUpdate+0xf8>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002cc:	4a18      	ldr	r2, [pc, #96]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 80002ce:	6852      	ldr	r2, [r2, #4]
 80002d0:	0992      	lsrs	r2, r2, #6
 80002d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002d6:	fb02 f303 	mul.w	r3, r2, r3
 80002da:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80002dc:	4b14      	ldr	r3, [pc, #80]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	0c1b      	lsrs	r3, r3, #16
 80002e2:	f003 0303 	and.w	r3, r3, #3
 80002e6:	3301      	adds	r3, #1
 80002e8:	005b      	lsls	r3, r3, #1
 80002ea:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002ec:	697a      	ldr	r2, [r7, #20]
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002f4:	4a0f      	ldr	r2, [pc, #60]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 80002f6:	6013      	str	r3, [r2, #0]
      break;
 80002f8:	e003      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 80002fc:	4a0e      	ldr	r2, [pc, #56]	; (8000338 <SystemCoreClockUpdate+0xf8>)
 80002fe:	601a      	str	r2, [r3, #0]
      break;
 8000300:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000302:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	091b      	lsrs	r3, r3, #4
 8000308:	f003 030f 	and.w	r3, r3, #15
 800030c:	4a0c      	ldr	r2, [pc, #48]	; (8000340 <SystemCoreClockUpdate+0x100>)
 800030e:	5cd3      	ldrb	r3, [r2, r3]
 8000310:	b2db      	uxtb	r3, r3
 8000312:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000314:	4b07      	ldr	r3, [pc, #28]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	693b      	ldr	r3, [r7, #16]
 800031a:	fa22 f303 	lsr.w	r3, r2, r3
 800031e:	4a05      	ldr	r2, [pc, #20]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000320:	6013      	str	r3, [r2, #0]
}
 8000322:	bf00      	nop
 8000324:	371c      	adds	r7, #28
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40023800 	.word	0x40023800
 8000334:	20000000 	.word	0x20000000
 8000338:	00f42400 	.word	0x00f42400
 800033c:	017d7840 	.word	0x017d7840
 8000340:	20000004 	.word	0x20000004

08000344 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000348:	4b23      	ldr	r3, [pc, #140]	; (80003d8 <SetSysClock+0x94>)
 800034a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800034c:	4a22      	ldr	r2, [pc, #136]	; (80003d8 <SetSysClock+0x94>)
 800034e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000352:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SetSysClock+0x98>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a20      	ldr	r2, [pc, #128]	; (80003dc <SetSysClock+0x98>)
 800035a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800035e:	6013      	str	r3, [r2, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000360:	4b1d      	ldr	r3, [pc, #116]	; (80003d8 <SetSysClock+0x94>)
 8000362:	4a1d      	ldr	r2, [pc, #116]	; (80003d8 <SetSysClock+0x94>)
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	6093      	str	r3, [r2, #8]

  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000368:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <SetSysClock+0x94>)
 800036a:	4a1b      	ldr	r2, [pc, #108]	; (80003d8 <SetSysClock+0x94>)
 800036c:	689b      	ldr	r3, [r3, #8]
 800036e:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000370:	4b19      	ldr	r3, [pc, #100]	; (80003d8 <SetSysClock+0x94>)
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	4a18      	ldr	r2, [pc, #96]	; (80003d8 <SetSysClock+0x94>)
 8000376:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800037a:	6093      	str	r3, [r2, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800037c:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <SetSysClock+0x94>)
 800037e:	4a18      	ldr	r2, [pc, #96]	; (80003e0 <SetSysClock+0x9c>)
 8000380:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 8000382:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <SetSysClock+0x94>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a14      	ldr	r2, [pc, #80]	; (80003d8 <SetSysClock+0x94>)
 8000388:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800038c:	6013      	str	r3, [r2, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800038e:	bf00      	nop
 8000390:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <SetSysClock+0x94>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000398:	2b00      	cmp	r3, #0
 800039a:	d0f9      	beq.n	8000390 <SetSysClock+0x4c>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SetSysClock+0xa0>)
 800039e:	f240 6202 	movw	r2, #1538	; 0x602
 80003a2:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <SetSysClock+0x94>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	4a0b      	ldr	r2, [pc, #44]	; (80003d8 <SetSysClock+0x94>)
 80003aa:	f023 0303 	bic.w	r3, r3, #3
 80003ae:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 80003b0:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <SetSysClock+0x94>)
 80003b2:	689b      	ldr	r3, [r3, #8]
 80003b4:	4a08      	ldr	r2, [pc, #32]	; (80003d8 <SetSysClock+0x94>)
 80003b6:	f043 0302 	orr.w	r3, r3, #2
 80003ba:	6093      	str	r3, [r2, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80003bc:	bf00      	nop
 80003be:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <SetSysClock+0x94>)
 80003c0:	689b      	ldr	r3, [r3, #8]
 80003c2:	f003 030c 	and.w	r3, r3, #12
 80003c6:	2b08      	cmp	r3, #8
 80003c8:	d1f9      	bne.n	80003be <SetSysClock+0x7a>
}
 80003ca:	bf00      	nop
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40023800 	.word	0x40023800
 80003dc:	40007000 	.word	0x40007000
 80003e0:	08015410 	.word	0x08015410
 80003e4:	40023c00 	.word	0x40023c00

080003e8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80003f0:	2300      	movs	r3, #0
 80003f2:	73fb      	strb	r3, [r7, #15]
 80003f4:	2300      	movs	r3, #0
 80003f6:	73bb      	strb	r3, [r7, #14]
 80003f8:	230f      	movs	r3, #15
 80003fa:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	78db      	ldrb	r3, [r3, #3]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d039      	beq.n	8000478 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000404:	4b27      	ldr	r3, [pc, #156]	; (80004a4 <NVIC_Init+0xbc>)
 8000406:	68db      	ldr	r3, [r3, #12]
 8000408:	43db      	mvns	r3, r3
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	b2db      	uxtb	r3, r3
 800040e:	f003 0307 	and.w	r3, r3, #7
 8000412:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000414:	7bfb      	ldrb	r3, [r7, #15]
 8000416:	f1c3 0304 	rsb	r3, r3, #4
 800041a:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 800041c:	7b7a      	ldrb	r2, [r7, #13]
 800041e:	7bfb      	ldrb	r3, [r7, #15]
 8000420:	fa42 f303 	asr.w	r3, r2, r3
 8000424:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	785b      	ldrb	r3, [r3, #1]
 800042a:	461a      	mov	r2, r3
 800042c:	7bbb      	ldrb	r3, [r7, #14]
 800042e:	fa02 f303 	lsl.w	r3, r2, r3
 8000432:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	789a      	ldrb	r2, [r3, #2]
 8000438:	7b7b      	ldrb	r3, [r7, #13]
 800043a:	4013      	ands	r3, r2
 800043c:	b2da      	uxtb	r2, r3
 800043e:	7bfb      	ldrb	r3, [r7, #15]
 8000440:	4313      	orrs	r3, r2
 8000442:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000444:	7bfb      	ldrb	r3, [r7, #15]
 8000446:	011b      	lsls	r3, r3, #4
 8000448:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800044a:	4a17      	ldr	r2, [pc, #92]	; (80004a8 <NVIC_Init+0xc0>)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	4413      	add	r3, r2
 8000452:	7bfa      	ldrb	r2, [r7, #15]
 8000454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000460:	4911      	ldr	r1, [pc, #68]	; (80004a8 <NVIC_Init+0xc0>)
 8000462:	687a      	ldr	r2, [r7, #4]
 8000464:	7812      	ldrb	r2, [r2, #0]
 8000466:	0952      	lsrs	r2, r2, #5
 8000468:	b2d2      	uxtb	r2, r2
 800046a:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800046c:	2201      	movs	r2, #1
 800046e:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000472:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000476:	e00f      	b.n	8000498 <NVIC_Init+0xb0>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000480:	4909      	ldr	r1, [pc, #36]	; (80004a8 <NVIC_Init+0xc0>)
 8000482:	687a      	ldr	r2, [r7, #4]
 8000484:	7812      	ldrb	r2, [r2, #0]
 8000486:	0952      	lsrs	r2, r2, #5
 8000488:	b2d2      	uxtb	r2, r2
 800048a:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800048c:	2201      	movs	r2, #1
 800048e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000490:	f100 0320 	add.w	r3, r0, #32
 8000494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	e000ed00 	.word	0xe000ed00
 80004a8:	e000e100 	.word	0xe000e100

080004ac <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b087      	sub	sp, #28
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
 80004ba:	2300      	movs	r3, #0
 80004bc:	613b      	str	r3, [r7, #16]
 80004be:	2300      	movs	r3, #0
 80004c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004c2:	2300      	movs	r3, #0
 80004c4:	617b      	str	r3, [r7, #20]
 80004c6:	e076      	b.n	80005b6 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80004c8:	2201      	movs	r2, #1
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	fa02 f303 	lsl.w	r3, r2, r3
 80004d0:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	693a      	ldr	r2, [r7, #16]
 80004d8:	4013      	ands	r3, r2
 80004da:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80004dc:	68fa      	ldr	r2, [r7, #12]
 80004de:	693b      	ldr	r3, [r7, #16]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d165      	bne.n	80005b0 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	2103      	movs	r1, #3
 80004ee:	fa01 f303 	lsl.w	r3, r1, r3
 80004f2:	43db      	mvns	r3, r3
 80004f4:	401a      	ands	r2, r3
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	791b      	ldrb	r3, [r3, #4]
 8000502:	4619      	mov	r1, r3
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	005b      	lsls	r3, r3, #1
 8000508:	fa01 f303 	lsl.w	r3, r1, r3
 800050c:	431a      	orrs	r2, r3
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	791b      	ldrb	r3, [r3, #4]
 8000516:	2b01      	cmp	r3, #1
 8000518:	d003      	beq.n	8000522 <GPIO_Init+0x76>
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	791b      	ldrb	r3, [r3, #4]
 800051e:	2b02      	cmp	r3, #2
 8000520:	d12e      	bne.n	8000580 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	689a      	ldr	r2, [r3, #8]
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	005b      	lsls	r3, r3, #1
 800052a:	2103      	movs	r1, #3
 800052c:	fa01 f303 	lsl.w	r3, r1, r3
 8000530:	43db      	mvns	r3, r3
 8000532:	401a      	ands	r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	689a      	ldr	r2, [r3, #8]
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	795b      	ldrb	r3, [r3, #5]
 8000540:	4619      	mov	r1, r3
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	fa01 f303 	lsl.w	r3, r1, r3
 800054a:	431a      	orrs	r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	685a      	ldr	r2, [r3, #4]
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	b29b      	uxth	r3, r3
 8000558:	4619      	mov	r1, r3
 800055a:	2301      	movs	r3, #1
 800055c:	408b      	lsls	r3, r1
 800055e:	43db      	mvns	r3, r3
 8000560:	401a      	ands	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	683a      	ldr	r2, [r7, #0]
 800056c:	7992      	ldrb	r2, [r2, #6]
 800056e:	4611      	mov	r1, r2
 8000570:	697a      	ldr	r2, [r7, #20]
 8000572:	b292      	uxth	r2, r2
 8000574:	fa01 f202 	lsl.w	r2, r1, r2
 8000578:	b292      	uxth	r2, r2
 800057a:	431a      	orrs	r2, r3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	68da      	ldr	r2, [r3, #12]
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	b29b      	uxth	r3, r3
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	2103      	movs	r1, #3
 800058c:	fa01 f303 	lsl.w	r3, r1, r3
 8000590:	43db      	mvns	r3, r3
 8000592:	401a      	ands	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	68da      	ldr	r2, [r3, #12]
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	79db      	ldrb	r3, [r3, #7]
 80005a0:	4619      	mov	r1, r3
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	fa01 f303 	lsl.w	r3, r1, r3
 80005aa:	431a      	orrs	r2, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	3301      	adds	r3, #1
 80005b4:	617b      	str	r3, [r7, #20]
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	2b0f      	cmp	r3, #15
 80005ba:	d985      	bls.n	80004c8 <GPIO_Init+0x1c>
    }
  }
}
 80005bc:	bf00      	nop
 80005be:	bf00      	nop
 80005c0:	371c      	adds	r7, #28
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices.
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80005ca:	b480      	push	{r7}
 80005cc:	b085      	sub	sp, #20
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
 80005d2:	460b      	mov	r3, r1
 80005d4:	807b      	strh	r3, [r7, #2]
 80005d6:	4613      	mov	r3, r2
 80005d8:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80005de:	2300      	movs	r3, #0
 80005e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80005e2:	787a      	ldrb	r2, [r7, #1]
 80005e4:	887b      	ldrh	r3, [r7, #2]
 80005e6:	f003 0307 	and.w	r3, r3, #7
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	fa02 f303 	lsl.w	r3, r2, r3
 80005f0:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80005f2:	887b      	ldrh	r3, [r7, #2]
 80005f4:	08db      	lsrs	r3, r3, #3
 80005f6:	b29b      	uxth	r3, r3
 80005f8:	461a      	mov	r2, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	3208      	adds	r2, #8
 80005fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000602:	887b      	ldrh	r3, [r7, #2]
 8000604:	f003 0307 	and.w	r3, r3, #7
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	210f      	movs	r1, #15
 800060c:	fa01 f303 	lsl.w	r3, r1, r3
 8000610:	43db      	mvns	r3, r3
 8000612:	8879      	ldrh	r1, [r7, #2]
 8000614:	08c9      	lsrs	r1, r1, #3
 8000616:	b289      	uxth	r1, r1
 8000618:	4608      	mov	r0, r1
 800061a:	ea02 0103 	and.w	r1, r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	f100 0208 	add.w	r2, r0, #8
 8000624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000628:	887b      	ldrh	r3, [r7, #2]
 800062a:	08db      	lsrs	r3, r3, #3
 800062c:	b29b      	uxth	r3, r3
 800062e:	461a      	mov	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	3208      	adds	r2, #8
 8000634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000638:	68fa      	ldr	r2, [r7, #12]
 800063a:	4313      	orrs	r3, r2
 800063c:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800063e:	887b      	ldrh	r3, [r7, #2]
 8000640:	08db      	lsrs	r3, r3, #3
 8000642:	b29b      	uxth	r3, r3
 8000644:	461a      	mov	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3208      	adds	r2, #8
 800064a:	68b9      	ldr	r1, [r7, #8]
 800064c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000650:	bf00      	nop
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr

0800065c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800065c:	b480      	push	{r7}
 800065e:	b089      	sub	sp, #36	; 0x24
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000664:	2300      	movs	r3, #0
 8000666:	61bb      	str	r3, [r7, #24]
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
 800066c:	2300      	movs	r3, #0
 800066e:	61fb      	str	r3, [r7, #28]
 8000670:	2302      	movs	r3, #2
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	2302      	movs	r3, #2
 800067a:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800067c:	4b4a      	ldr	r3, [pc, #296]	; (80007a8 <RCC_GetClocksFreq+0x14c>)
 800067e:	689b      	ldr	r3, [r3, #8]
 8000680:	f003 030c 	and.w	r3, r3, #12
 8000684:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000686:	69bb      	ldr	r3, [r7, #24]
 8000688:	2b08      	cmp	r3, #8
 800068a:	d011      	beq.n	80006b0 <RCC_GetClocksFreq+0x54>
 800068c:	69bb      	ldr	r3, [r7, #24]
 800068e:	2b08      	cmp	r3, #8
 8000690:	d844      	bhi.n	800071c <RCC_GetClocksFreq+0xc0>
 8000692:	69bb      	ldr	r3, [r7, #24]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d003      	beq.n	80006a0 <RCC_GetClocksFreq+0x44>
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	2b04      	cmp	r3, #4
 800069c:	d004      	beq.n	80006a8 <RCC_GetClocksFreq+0x4c>
 800069e:	e03d      	b.n	800071c <RCC_GetClocksFreq+0xc0>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	4a42      	ldr	r2, [pc, #264]	; (80007ac <RCC_GetClocksFreq+0x150>)
 80006a4:	601a      	str	r2, [r3, #0]
    break;
 80006a6:	e03d      	b.n	8000724 <RCC_GetClocksFreq+0xc8>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4a41      	ldr	r2, [pc, #260]	; (80007b0 <RCC_GetClocksFreq+0x154>)
 80006ac:	601a      	str	r2, [r3, #0]
    break;
 80006ae:	e039      	b.n	8000724 <RCC_GetClocksFreq+0xc8>
  case 0x08:  /* PLL P used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80006b0:	4b3d      	ldr	r3, [pc, #244]	; (80007a8 <RCC_GetClocksFreq+0x14c>)
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	0d9b      	lsrs	r3, r3, #22
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80006bc:	4b3a      	ldr	r3, [pc, #232]	; (80007a8 <RCC_GetClocksFreq+0x14c>)
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80006c4:	60bb      	str	r3, [r7, #8]

    if (pllsource != 0)
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d00c      	beq.n	80006e6 <RCC_GetClocksFreq+0x8a>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80006cc:	4a38      	ldr	r2, [pc, #224]	; (80007b0 <RCC_GetClocksFreq+0x154>)
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d4:	4a34      	ldr	r2, [pc, #208]	; (80007a8 <RCC_GetClocksFreq+0x14c>)
 80006d6:	6852      	ldr	r2, [r2, #4]
 80006d8:	0992      	lsrs	r2, r2, #6
 80006da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80006de:	fb02 f303 	mul.w	r3, r2, r3
 80006e2:	61fb      	str	r3, [r7, #28]
 80006e4:	e00b      	b.n	80006fe <RCC_GetClocksFreq+0xa2>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80006e6:	4a31      	ldr	r2, [pc, #196]	; (80007ac <RCC_GetClocksFreq+0x150>)
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ee:	4a2e      	ldr	r2, [pc, #184]	; (80007a8 <RCC_GetClocksFreq+0x14c>)
 80006f0:	6852      	ldr	r2, [r2, #4]
 80006f2:	0992      	lsrs	r2, r2, #6
 80006f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80006f8:	fb02 f303 	mul.w	r3, r2, r3
 80006fc:	61fb      	str	r3, [r7, #28]
    }

    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80006fe:	4b2a      	ldr	r3, [pc, #168]	; (80007a8 <RCC_GetClocksFreq+0x14c>)
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	0c1b      	lsrs	r3, r3, #16
 8000704:	f003 0303 	and.w	r3, r3, #3
 8000708:	3301      	adds	r3, #1
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800070e:	69fa      	ldr	r2, [r7, #28]
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	fbb2 f2f3 	udiv	r2, r2, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	601a      	str	r2, [r3, #0]
    break;
 800071a:	e003      	b.n	8000724 <RCC_GetClocksFreq+0xc8>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a23      	ldr	r2, [pc, #140]	; (80007ac <RCC_GetClocksFreq+0x150>)
 8000720:	601a      	str	r2, [r3, #0]
    break;
 8000722:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000724:	4b20      	ldr	r3, [pc, #128]	; (80007a8 <RCC_GetClocksFreq+0x14c>)
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800072c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800072e:	69bb      	ldr	r3, [r7, #24]
 8000730:	091b      	lsrs	r3, r3, #4
 8000732:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000734:	4a1f      	ldr	r2, [pc, #124]	; (80007b4 <RCC_GetClocksFreq+0x158>)
 8000736:	69bb      	ldr	r3, [r7, #24]
 8000738:	4413      	add	r3, r2
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	b2db      	uxtb	r3, r3
 800073e:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	40da      	lsrs	r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800074c:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <RCC_GetClocksFreq+0x14c>)
 800074e:	689b      	ldr	r3, [r3, #8]
 8000750:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000754:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000756:	69bb      	ldr	r3, [r7, #24]
 8000758:	0a9b      	lsrs	r3, r3, #10
 800075a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800075c:	4a15      	ldr	r2, [pc, #84]	; (80007b4 <RCC_GetClocksFreq+0x158>)
 800075e:	69bb      	ldr	r3, [r7, #24]
 8000760:	4413      	add	r3, r2
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	b2db      	uxtb	r3, r3
 8000766:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	685a      	ldr	r2, [r3, #4]
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	40da      	lsrs	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <RCC_GetClocksFreq+0x14c>)
 8000776:	689b      	ldr	r3, [r3, #8]
 8000778:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800077c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	0b5b      	lsrs	r3, r3, #13
 8000782:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000784:	4a0b      	ldr	r2, [pc, #44]	; (80007b4 <RCC_GetClocksFreq+0x158>)
 8000786:	69bb      	ldr	r3, [r7, #24]
 8000788:	4413      	add	r3, r2
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	685a      	ldr	r2, [r3, #4]
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	40da      	lsrs	r2, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	60da      	str	r2, [r3, #12]
}
 800079c:	bf00      	nop
 800079e:	3724      	adds	r7, #36	; 0x24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	40023800 	.word	0x40023800
 80007ac:	00f42400 	.word	0x00f42400
 80007b0:	017d7840 	.word	0x017d7840
 80007b4:	20000014 	.word	0x20000014

080007b8 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007c4:	78fb      	ldrb	r3, [r7, #3]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d006      	beq.n	80007d8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80007cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007ce:	4909      	ldr	r1, [pc, #36]	; (80007f4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80007d6:	e006      	b.n	80007e6 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80007da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	43db      	mvns	r3, r3
 80007e0:	4904      	ldr	r1, [pc, #16]	; (80007f4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80007e2:	4013      	ands	r3, r2
 80007e4:	630b      	str	r3, [r1, #48]	; 0x30
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800

080007f8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000804:	78fb      	ldrb	r3, [r7, #3]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d006      	beq.n	8000818 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800080a:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <RCC_APB1PeriphClockCmd+0x3c>)
 800080c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800080e:	4909      	ldr	r1, [pc, #36]	; (8000834 <RCC_APB1PeriphClockCmd+0x3c>)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4313      	orrs	r3, r2
 8000814:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000816:	e006      	b.n	8000826 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <RCC_APB1PeriphClockCmd+0x3c>)
 800081a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	43db      	mvns	r3, r3
 8000820:	4904      	ldr	r1, [pc, #16]	; (8000834 <RCC_APB1PeriphClockCmd+0x3c>)
 8000822:	4013      	ands	r3, r2
 8000824:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800

08000838 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	881b      	ldrh	r3, [r3, #0]
 800084a:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4a29      	ldr	r2, [pc, #164]	; (80008f4 <TIM_TimeBaseInit+0xbc>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d013      	beq.n	800087c <TIM_TimeBaseInit+0x44>
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4a28      	ldr	r2, [pc, #160]	; (80008f8 <TIM_TimeBaseInit+0xc0>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d00f      	beq.n	800087c <TIM_TimeBaseInit+0x44>
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000862:	d00b      	beq.n	800087c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	4a25      	ldr	r2, [pc, #148]	; (80008fc <TIM_TimeBaseInit+0xc4>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d007      	beq.n	800087c <TIM_TimeBaseInit+0x44>
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a24      	ldr	r2, [pc, #144]	; (8000900 <TIM_TimeBaseInit+0xc8>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d003      	beq.n	800087c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5))
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4a23      	ldr	r2, [pc, #140]	; (8000904 <TIM_TimeBaseInit+0xcc>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d108      	bne.n	800088e <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800087c:	89fb      	ldrh	r3, [r7, #14]
 800087e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000882:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	885a      	ldrh	r2, [r3, #2]
 8000888:	89fb      	ldrh	r3, [r7, #14]
 800088a:	4313      	orrs	r3, r2
 800088c:	81fb      	strh	r3, [r7, #14]
  }

  if((TIMx != TIM6) && (TIMx != TIM7))
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4a1d      	ldr	r2, [pc, #116]	; (8000908 <TIM_TimeBaseInit+0xd0>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d00c      	beq.n	80008b0 <TIM_TimeBaseInit+0x78>
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4a1c      	ldr	r2, [pc, #112]	; (800090c <TIM_TimeBaseInit+0xd4>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d008      	beq.n	80008b0 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800089e:	89fb      	ldrh	r3, [r7, #14]
 80008a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008a4:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	891a      	ldrh	r2, [r3, #8]
 80008aa:	89fb      	ldrh	r3, [r7, #14]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	89fa      	ldrh	r2, [r7, #14]
 80008b4:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	685a      	ldr	r2, [r3, #4]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	881a      	ldrh	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	851a      	strh	r2, [r3, #40]	; 0x28

  if ((TIMx == TIM1) || (TIMx == TIM8))
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <TIM_TimeBaseInit+0xbc>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d003      	beq.n	80008d6 <TIM_TimeBaseInit+0x9e>
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4a09      	ldr	r2, [pc, #36]	; (80008f8 <TIM_TimeBaseInit+0xc0>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d104      	bne.n	80008e0 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	7a9b      	ldrb	r3, [r3, #10]
 80008da:	b29a      	uxth	r2, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2201      	movs	r2, #1
 80008e4:	829a      	strh	r2, [r3, #20]
}
 80008e6:	bf00      	nop
 80008e8:	3714      	adds	r7, #20
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	40010000 	.word	0x40010000
 80008f8:	40010400 	.word	0x40010400
 80008fc:	40000400 	.word	0x40000400
 8000900:	40000800 	.word	0x40000800
 8000904:	40000c00 	.word	0x40000c00
 8000908:	40001000 	.word	0x40001000
 800090c:	40001400 	.word	0x40001400

08000910 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	460b      	mov	r3, r1
 800091a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800091c:	78fb      	ldrb	r3, [r7, #3]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d008      	beq.n	8000934 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	b29b      	uxth	r3, r3
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	b29a      	uxth	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000932:	e007      	b.n	8000944 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	b29b      	uxth	r3, r3
 800093a:	f023 0301 	bic.w	r3, r3, #1
 800093e:	b29a      	uxth	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	801a      	strh	r2, [r3, #0]
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	881b      	ldrh	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d10f      	bne.n	8000982 <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	8859      	ldrh	r1, [r3, #2]
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	889a      	ldrh	r2, [r3, #4]
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	891b      	ldrh	r3, [r3, #8]
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f000 f921 	bl	8000bb6 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	88db      	ldrh	r3, [r3, #6]
 8000978:	4619      	mov	r1, r3
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f000 f848 	bl	8000a10 <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8000980:	e036      	b.n	80009f0 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	881b      	ldrh	r3, [r3, #0]
 8000986:	2b04      	cmp	r3, #4
 8000988:	d10f      	bne.n	80009aa <TIM_ICInit+0x5a>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	8859      	ldrh	r1, [r3, #2]
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	889a      	ldrh	r2, [r3, #4]
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	891b      	ldrh	r3, [r3, #8]
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f000 f950 	bl	8000c3c <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	88db      	ldrh	r3, [r3, #6]
 80009a0:	4619      	mov	r1, r3
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f000 f850 	bl	8000a48 <TIM_SetIC2Prescaler>
}
 80009a8:	e022      	b.n	80009f0 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	2b08      	cmp	r3, #8
 80009b0:	d10f      	bne.n	80009d2 <TIM_ICInit+0x82>
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	8859      	ldrh	r1, [r3, #2]
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	889a      	ldrh	r2, [r3, #4]
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	891b      	ldrh	r3, [r3, #8]
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f000 f989 	bl	8000cd6 <TI3_Config>
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	88db      	ldrh	r3, [r3, #6]
 80009c8:	4619      	mov	r1, r3
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f000 f85a 	bl	8000a84 <TIM_SetIC3Prescaler>
}
 80009d0:	e00e      	b.n	80009f0 <TIM_ICInit+0xa0>
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	8859      	ldrh	r1, [r3, #2]
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	889a      	ldrh	r2, [r3, #4]
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	891b      	ldrh	r3, [r3, #8]
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f000 f9c1 	bl	8000d66 <TI4_Config>
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	88db      	ldrh	r3, [r3, #6]
 80009e8:	4619      	mov	r1, r3
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f000 f866 	bl	8000abc <TIM_SetIC4Prescaler>
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	460b      	mov	r3, r1
 8000a1a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	8b1b      	ldrh	r3, [r3, #24]
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	f023 030c 	bic.w	r3, r3, #12
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	8b1b      	ldrh	r3, [r3, #24]
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	887b      	ldrh	r3, [r7, #2]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	831a      	strh	r2, [r3, #24]
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	460b      	mov	r3, r1
 8000a52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	8b1b      	ldrh	r3, [r3, #24]
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	8b1b      	ldrh	r3, [r3, #24]
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	887b      	ldrh	r3, [r7, #2]
 8000a6c:	021b      	lsls	r3, r3, #8
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	4313      	orrs	r3, r2
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	831a      	strh	r2, [r3, #24]
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	8b9b      	ldrh	r3, [r3, #28]
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	f023 030c 	bic.w	r3, r3, #12
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	8b9b      	ldrh	r3, [r3, #28]
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	887b      	ldrh	r3, [r7, #2]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	839a      	strh	r2, [r3, #28]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	8b9b      	ldrh	r3, [r3, #28]
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	8b9b      	ldrh	r3, [r3, #28]
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	887b      	ldrh	r3, [r7, #2]
 8000ae0:	021b      	lsls	r3, r3, #8
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	839a      	strh	r2, [r3, #28]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	807b      	strh	r3, [r7, #2]
 8000b04:	4613      	mov	r3, r2
 8000b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b08:	787b      	ldrb	r3, [r7, #1]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d008      	beq.n	8000b20 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	899b      	ldrh	r3, [r3, #12]
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	887b      	ldrh	r3, [r7, #2]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000b1e:	e009      	b.n	8000b34 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	899b      	ldrh	r3, [r3, #12]
 8000b24:	b29a      	uxth	r2, r3
 8000b26:	887b      	ldrh	r3, [r7, #2]
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	819a      	strh	r2, [r3, #12]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	81bb      	strh	r3, [r7, #12]
 8000b54:	2300      	movs	r3, #0
 8000b56:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));

  itstatus = TIMx->SR & TIM_IT;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	8a1b      	ldrh	r3, [r3, #16]
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	887b      	ldrh	r3, [r7, #2]
 8000b60:	4013      	ands	r3, r2
 8000b62:	81bb      	strh	r3, [r7, #12]

  itenable = TIMx->DIER & TIM_IT;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	899b      	ldrh	r3, [r3, #12]
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	887b      	ldrh	r3, [r7, #2]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000b70:	89bb      	ldrh	r3, [r7, #12]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d005      	beq.n	8000b82 <TIM_GetITStatus+0x42>
 8000b76:	897b      	ldrh	r3, [r7, #10]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d002      	beq.n	8000b82 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	73fb      	strb	r3, [r7, #15]
 8000b80:	e001      	b.n	8000b86 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8000b82:	2300      	movs	r3, #0
 8000b84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000ba0:	887b      	ldrh	r3, [r7, #2]
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	821a      	strh	r2, [r3, #16]
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b087      	sub	sp, #28
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	60f8      	str	r0, [r7, #12]
 8000bbe:	4608      	mov	r0, r1
 8000bc0:	4611      	mov	r1, r2
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	817b      	strh	r3, [r7, #10]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	813b      	strh	r3, [r7, #8]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	82fb      	strh	r3, [r7, #22]
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	8c1b      	ldrh	r3, [r3, #32]
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	f023 0301 	bic.w	r3, r3, #1
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	8b1b      	ldrh	r3, [r3, #24]
 8000bec:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	8c1b      	ldrh	r3, [r3, #32]
 8000bf2:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8000bf4:	8afb      	ldrh	r3, [r7, #22]
 8000bf6:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8000bfa:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	011b      	lsls	r3, r3, #4
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	893b      	ldrh	r3, [r7, #8]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	8afb      	ldrh	r3, [r7, #22]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000c0e:	8abb      	ldrh	r3, [r7, #20]
 8000c10:	f023 030a 	bic.w	r3, r3, #10
 8000c14:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8000c16:	897a      	ldrh	r2, [r7, #10]
 8000c18:	8abb      	ldrh	r3, [r7, #20]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	f043 0301 	orr.w	r3, r3, #1
 8000c22:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	8afa      	ldrh	r2, [r7, #22]
 8000c28:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	8aba      	ldrh	r2, [r7, #20]
 8000c2e:	841a      	strh	r2, [r3, #32]
}
 8000c30:	bf00      	nop
 8000c32:	371c      	adds	r7, #28
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b087      	sub	sp, #28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	4608      	mov	r0, r1
 8000c46:	4611      	mov	r1, r2
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	817b      	strh	r3, [r7, #10]
 8000c4e:	460b      	mov	r3, r1
 8000c50:	813b      	strh	r3, [r7, #8]
 8000c52:	4613      	mov	r3, r2
 8000c54:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	82fb      	strh	r3, [r7, #22]
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	82bb      	strh	r3, [r7, #20]
 8000c5e:	2300      	movs	r3, #0
 8000c60:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	8c1b      	ldrh	r3, [r3, #32]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	f023 0310 	bic.w	r3, r3, #16
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	8b1b      	ldrh	r3, [r3, #24]
 8000c76:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	8c1b      	ldrh	r3, [r3, #32]
 8000c7c:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8000c7e:	897b      	ldrh	r3, [r7, #10]
 8000c80:	011b      	lsls	r3, r3, #4
 8000c82:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8000c84:	8afb      	ldrh	r3, [r7, #22]
 8000c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c8a:	051b      	lsls	r3, r3, #20
 8000c8c:	0d1b      	lsrs	r3, r3, #20
 8000c8e:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8000c90:	88fb      	ldrh	r3, [r7, #6]
 8000c92:	031b      	lsls	r3, r3, #12
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	8afb      	ldrh	r3, [r7, #22]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8000c9c:	893b      	ldrh	r3, [r7, #8]
 8000c9e:	021b      	lsls	r3, r3, #8
 8000ca0:	b29a      	uxth	r2, r3
 8000ca2:	8afb      	ldrh	r3, [r7, #22]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000ca8:	8abb      	ldrh	r3, [r7, #20]
 8000caa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8000cae:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8000cb0:	8a7a      	ldrh	r2, [r7, #18]
 8000cb2:	8abb      	ldrh	r3, [r7, #20]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	f043 0310 	orr.w	r3, r3, #16
 8000cbc:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	8afa      	ldrh	r2, [r7, #22]
 8000cc2:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	8aba      	ldrh	r2, [r7, #20]
 8000cc8:	841a      	strh	r2, [r3, #32]
}
 8000cca:	bf00      	nop
 8000ccc:	371c      	adds	r7, #28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b087      	sub	sp, #28
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	60f8      	str	r0, [r7, #12]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	4611      	mov	r1, r2
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	817b      	strh	r3, [r7, #10]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	813b      	strh	r3, [r7, #8]
 8000cec:	4613      	mov	r3, r2
 8000cee:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	82fb      	strh	r3, [r7, #22]
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	82bb      	strh	r3, [r7, #20]
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	8c1b      	ldrh	r3, [r3, #32]
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	8b9b      	ldrh	r3, [r3, #28]
 8000d10:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	8c1b      	ldrh	r3, [r3, #32]
 8000d16:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8000d18:	897b      	ldrh	r3, [r7, #10]
 8000d1a:	021b      	lsls	r3, r3, #8
 8000d1c:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8000d1e:	8afb      	ldrh	r3, [r7, #22]
 8000d20:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8000d24:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	011b      	lsls	r3, r3, #4
 8000d2a:	b29a      	uxth	r2, r3
 8000d2c:	893b      	ldrh	r3, [r7, #8]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	8afb      	ldrh	r3, [r7, #22]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8000d38:	8abb      	ldrh	r3, [r7, #20]
 8000d3a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8000d3e:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8000d40:	8a7a      	ldrh	r2, [r7, #18]
 8000d42:	8abb      	ldrh	r3, [r7, #20]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4c:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	8afa      	ldrh	r2, [r7, #22]
 8000d52:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	8aba      	ldrh	r2, [r7, #20]
 8000d58:	841a      	strh	r2, [r3, #32]
}
 8000d5a:	bf00      	nop
 8000d5c:	371c      	adds	r7, #28
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8000d66:	b480      	push	{r7}
 8000d68:	b087      	sub	sp, #28
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	60f8      	str	r0, [r7, #12]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	4611      	mov	r1, r2
 8000d72:	461a      	mov	r2, r3
 8000d74:	4603      	mov	r3, r0
 8000d76:	817b      	strh	r3, [r7, #10]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	813b      	strh	r3, [r7, #8]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	82fb      	strh	r3, [r7, #22]
 8000d84:	2300      	movs	r3, #0
 8000d86:	82bb      	strh	r3, [r7, #20]
 8000d88:	2300      	movs	r3, #0
 8000d8a:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	8c1b      	ldrh	r3, [r3, #32]
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	8b9b      	ldrh	r3, [r3, #28]
 8000da0:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	8c1b      	ldrh	r3, [r3, #32]
 8000da6:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8000da8:	897b      	ldrh	r3, [r7, #10]
 8000daa:	031b      	lsls	r3, r3, #12
 8000dac:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8000dae:	8afb      	ldrh	r3, [r7, #22]
 8000db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000db4:	051b      	lsls	r3, r3, #20
 8000db6:	0d1b      	lsrs	r3, r3, #20
 8000db8:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8000dba:	893b      	ldrh	r3, [r7, #8]
 8000dbc:	021b      	lsls	r3, r3, #8
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	8afb      	ldrh	r3, [r7, #22]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8000dc6:	88fb      	ldrh	r3, [r7, #6]
 8000dc8:	031b      	lsls	r3, r3, #12
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	8afb      	ldrh	r3, [r7, #22]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8000dd2:	8abb      	ldrh	r3, [r7, #20]
 8000dd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000dd8:	045b      	lsls	r3, r3, #17
 8000dda:	0c5b      	lsrs	r3, r3, #17
 8000ddc:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8000dde:	8a7a      	ldrh	r2, [r7, #18]
 8000de0:	8abb      	ldrh	r3, [r7, #20]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dea:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	8afa      	ldrh	r2, [r7, #22]
 8000df0:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	8aba      	ldrh	r2, [r7, #20]
 8000df6:	841a      	strh	r2, [r3, #32]
}
 8000df8:	bf00      	nop
 8000dfa:	371c      	adds	r7, #28
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	; 0x28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
 8000e12:	2300      	movs	r3, #0
 8000e14:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	8a1b      	ldrh	r3, [r3, #16]
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e28:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	88db      	ldrh	r3, [r3, #6]
 8000e32:	461a      	mov	r2, r3
 8000e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e36:	4313      	orrs	r3, r2
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	899b      	ldrh	r3, [r3, #12]
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000e50:	f023 030c 	bic.w	r3, r3, #12
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	889a      	ldrh	r2, [r3, #4]
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	891b      	ldrh	r3, [r3, #8]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000e66:	4313      	orrs	r3, r2
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	8a9b      	ldrh	r3, [r3, #20]
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	899b      	ldrh	r3, [r3, #12]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e92:	4313      	orrs	r3, r2
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000e9e:	f107 0308 	add.w	r3, r7, #8
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fbda 	bl	800065c <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a30      	ldr	r2, [pc, #192]	; (8000f6c <USART_Init+0x168>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d003      	beq.n	8000eb8 <USART_Init+0xb4>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a2f      	ldr	r2, [pc, #188]	; (8000f70 <USART_Init+0x16c>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d102      	bne.n	8000ebe <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	623b      	str	r3, [r7, #32]
 8000ebc:	e001      	b.n	8000ec2 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	899b      	ldrh	r3, [r3, #12]
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	b21b      	sxth	r3, r3
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	da0c      	bge.n	8000ee8 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000ece:	6a3a      	ldr	r2, [r7, #32]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	4413      	add	r3, r2
 8000ed6:	009a      	lsls	r2, r3, #2
 8000ed8:	441a      	add	r2, r3
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee4:	61fb      	str	r3, [r7, #28]
 8000ee6:	e00b      	b.n	8000f00 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000ee8:	6a3a      	ldr	r2, [r7, #32]
 8000eea:	4613      	mov	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	4413      	add	r3, r2
 8000ef0:	009a      	lsls	r2, r3, #2
 8000ef2:	441a      	add	r2, r3
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efe:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	4a1c      	ldr	r2, [pc, #112]	; (8000f74 <USART_Init+0x170>)
 8000f04:	fba2 2303 	umull	r2, r3, r2, r3
 8000f08:	095b      	lsrs	r3, r3, #5
 8000f0a:	011b      	lsls	r3, r3, #4
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f10:	091b      	lsrs	r3, r3, #4
 8000f12:	2264      	movs	r2, #100	; 0x64
 8000f14:	fb02 f303 	mul.w	r3, r2, r3
 8000f18:	69fa      	ldr	r2, [r7, #28]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	899b      	ldrh	r3, [r3, #12]
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	b21b      	sxth	r3, r3
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	da0c      	bge.n	8000f44 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	3332      	adds	r3, #50	; 0x32
 8000f30:	4a10      	ldr	r2, [pc, #64]	; (8000f74 <USART_Init+0x170>)
 8000f32:	fba2 2303 	umull	r2, r3, r2, r3
 8000f36:	095b      	lsrs	r3, r3, #5
 8000f38:	f003 0307 	and.w	r3, r3, #7
 8000f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
 8000f42:	e00b      	b.n	8000f5c <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	3332      	adds	r3, #50	; 0x32
 8000f4a:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <USART_Init+0x170>)
 8000f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f50:	095b      	lsrs	r3, r3, #5
 8000f52:	f003 030f 	and.w	r3, r3, #15
 8000f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	811a      	strh	r2, [r3, #8]
}
 8000f64:	bf00      	nop
 8000f66:	3728      	adds	r7, #40	; 0x28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40011000 	.word	0x40011000
 8000f70:	40011400 	.word	0x40011400
 8000f74:	51eb851f 	.word	0x51eb851f

08000f78 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000f84:	78fb      	ldrb	r3, [r7, #3]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d008      	beq.n	8000f9c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	899b      	ldrh	r3, [r3, #12]
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000f9a:	e007      	b.n	8000fac <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	899b      	ldrh	r3, [r3, #12]
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	819a      	strh	r2, [r3, #12]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000fc4:	887b      	ldrh	r3, [r7, #2]
 8000fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	809a      	strh	r2, [r3, #4]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	889b      	ldrh	r3, [r3, #4]
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000fee:	b29b      	uxth	r3, r3
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b087      	sub	sp, #28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	2300      	movs	r3, #0
 8001012:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001014:	2300      	movs	r3, #0
 8001016:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001018:	887b      	ldrh	r3, [r7, #2]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	095b      	lsrs	r3, r3, #5
 800101e:	b2db      	uxtb	r3, r3
 8001020:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001022:	887b      	ldrh	r3, [r7, #2]
 8001024:	f003 031f 	and.w	r3, r3, #31
 8001028:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800102a:	2201      	movs	r2, #1
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d107      	bne.n	800104a <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	899b      	ldrh	r3, [r3, #12]
 800103e:	b29b      	uxth	r3, r3
 8001040:	461a      	mov	r2, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	4013      	ands	r3, r2
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	e011      	b.n	800106e <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	2b02      	cmp	r3, #2
 800104e:	d107      	bne.n	8001060 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	8a1b      	ldrh	r3, [r3, #16]
 8001054:	b29b      	uxth	r3, r3
 8001056:	461a      	mov	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	4013      	ands	r3, r2
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	e006      	b.n	800106e <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	8a9b      	ldrh	r3, [r3, #20]
 8001064:	b29b      	uxth	r3, r3
 8001066:	461a      	mov	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	4013      	ands	r3, r2
 800106c:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 800106e:	887b      	ldrh	r3, [r7, #2]
 8001070:	0a1b      	lsrs	r3, r3, #8
 8001072:	b29b      	uxth	r3, r3
 8001074:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001076:	2201      	movs	r2, #1
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	b29b      	uxth	r3, r3
 8001086:	461a      	mov	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4013      	ands	r3, r2
 800108c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d005      	beq.n	80010a0 <USART_GetITStatus+0xa4>
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d002      	beq.n	80010a0 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 800109a:	2301      	movs	r3, #1
 800109c:	74fb      	strb	r3, [r7, #19]
 800109e:	e001      	b.n	80010a4 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 80010a0:	2300      	movs	r3, #0
 80010a2:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80010a4:	7cfb      	ldrb	r3, [r7, #19]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	371c      	adds	r7, #28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b085      	sub	sp, #20
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
 80010ba:	460b      	mov	r3, r1
 80010bc:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 80010be:	2300      	movs	r3, #0
 80010c0:	81fb      	strh	r3, [r7, #14]
 80010c2:	2300      	movs	r3, #0
 80010c4:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 80010c6:	887b      	ldrh	r3, [r7, #2]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 80010cc:	89fb      	ldrh	r3, [r7, #14]
 80010ce:	2201      	movs	r2, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 80010d6:	89bb      	ldrh	r3, [r7, #12]
 80010d8:	43db      	mvns	r3, r3
 80010da:	b29a      	uxth	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	801a      	strh	r2, [r3, #0]
}
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	da0b      	bge.n	8001118 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	490c      	ldr	r1, [pc, #48]	; (8001138 <NVIC_SetPriority+0x4c>)
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	f003 030f 	and.w	r3, r3, #15
 800110c:	3b04      	subs	r3, #4
 800110e:	0112      	lsls	r2, r2, #4
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	440b      	add	r3, r1
 8001114:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001116:	e009      	b.n	800112c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	b2da      	uxtb	r2, r3
 800111c:	4907      	ldr	r1, [pc, #28]	; (800113c <NVIC_SetPriority+0x50>)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	0112      	lsls	r2, r2, #4
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	440b      	add	r3, r1
 8001128:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00
 800113c:	e000e100 	.word	0xe000e100

08001140 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001150:	d301      	bcc.n	8001156 <SysTick_Config+0x16>
 8001152:	2301      	movs	r3, #1
 8001154:	e00f      	b.n	8001176 <SysTick_Config+0x36>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001156:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <SysTick_Config+0x40>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115e:	210f      	movs	r1, #15
 8001160:	f04f 30ff 	mov.w	r0, #4294967295
 8001164:	f7ff ffc2 	bl	80010ec <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <SysTick_Config+0x40>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116e:	4b04      	ldr	r3, [pc, #16]	; (8001180 <SysTick_Config+0x40>)
 8001170:	2207      	movs	r2, #7
 8001172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	e000e010 	.word	0xe000e010

08001184 <TimerInit>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
TimerInit(void) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;

    RCC_GetClocksFreq(&RCC_Clocks);
 800118a:	463b      	mov	r3, r7
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fa65 	bl	800065c <RCC_GetClocksFreq>
    SysTick_Config(RCC_Clocks.SYSCLK_Frequency/1000);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <TimerInit+0x3c>)
 8001196:	fba2 2303 	umull	r2, r3, r2, r3
 800119a:	099b      	lsrs	r3, r3, #6
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ffcf 	bl	8001140 <SysTick_Config>
    NVIC_SetPriority(SysTick_IRQn, 1);
 80011a2:	2101      	movs	r1, #1
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f7ff ffa0 	bl	80010ec <NVIC_SetPriority>
    memsetl((uint8_t *)g_pTimerHandle, 0, sizeof(g_pTimerHandle));
 80011ac:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80011b0:	2100      	movs	r1, #0
 80011b2:	4804      	ldr	r0, [pc, #16]	; (80011c4 <TimerInit+0x40>)
 80011b4:	f000 f9e3 	bl	800157e <memsetl>
    DBG_TIMER_SEND_STR("$ TimerInit\n");
}
 80011b8:	bf00      	nop
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	10624dd3 	.word	0x10624dd3
 80011c4:	20000040 	.word	0x20000040

080011c8 <TimerStop>:
 * @retval None
 */
uint8_t
TimerStop(
    uint8_t byTimerId
) {   
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
    if ((byTimerId >= MAX_TIMER) || (g_pTimerHandle[byTimerId].callbackFunc == NULL))
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2b0f      	cmp	r3, #15
 80011d6:	d80a      	bhi.n	80011ee <TimerStop+0x26>
 80011d8:	79fa      	ldrb	r2, [r7, #7]
 80011da:	4922      	ldr	r1, [pc, #136]	; (8001264 <TimerStop+0x9c>)
 80011dc:	4613      	mov	r3, r2
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	4413      	add	r3, r2
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	440b      	add	r3, r1
 80011e6:	3310      	adds	r3, #16
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <TimerStop+0x2a>
        return 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	e031      	b.n	8001256 <TimerStop+0x8e>
    DBG_TIMER_SEND_STR(g_pTimerHandle[byTimerId].name);
    DBG_TIMER_SEND_STR(" Id = "); 
    DBG_TIMER_SEND_NUM(byTimerId);
    DBG_TIMER_SEND_STR("\n");
    
    g_pTimerHandle[byTimerId].name = NULL;
 80011f2:	79fa      	ldrb	r2, [r7, #7]
 80011f4:	491b      	ldr	r1, [pc, #108]	; (8001264 <TimerStop+0x9c>)
 80011f6:	4613      	mov	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4413      	add	r3, r2
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	440b      	add	r3, r1
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].callbackFunc = NULL;
 8001204:	79fa      	ldrb	r2, [r7, #7]
 8001206:	4917      	ldr	r1, [pc, #92]	; (8001264 <TimerStop+0x9c>)
 8001208:	4613      	mov	r3, r2
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	4413      	add	r3, r2
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	440b      	add	r3, r1
 8001212:	3310      	adds	r3, #16
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].repeats = 0;
 8001218:	79fa      	ldrb	r2, [r7, #7]
 800121a:	4912      	ldr	r1, [pc, #72]	; (8001264 <TimerStop+0x9c>)
 800121c:	4613      	mov	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4413      	add	r3, r2
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	440b      	add	r3, r1
 8001226:	330c      	adds	r3, #12
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
    g_pTimerHandle[byTimerId].milSecTimeout = 0;
 800122c:	79fa      	ldrb	r2, [r7, #7]
 800122e:	490d      	ldr	r1, [pc, #52]	; (8001264 <TimerStop+0x9c>)
 8001230:	4613      	mov	r3, r2
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	4413      	add	r3, r2
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	440b      	add	r3, r1
 800123a:	3308      	adds	r3, #8
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].milSecStart = 0;
 8001240:	79fa      	ldrb	r2, [r7, #7]
 8001242:	4908      	ldr	r1, [pc, #32]	; (8001264 <TimerStop+0x9c>)
 8001244:	4613      	mov	r3, r2
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	4413      	add	r3, r2
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	440b      	add	r3, r1
 800124e:	3304      	adds	r3, #4
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
    
    return 1;
 8001254:	2301      	movs	r3, #1
}
 8001256:	4618      	mov	r0, r3
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000040 	.word	0x20000040

08001268 <GetMilSecTick>:
 * @brief  None
 * @param  None
 * @retval None
 */
uint32_t
GetMilSecTick(void) {
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
    return g_wMilSecTickTimer;
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <GetMilSecTick+0x14>)
 800126e:	681b      	ldr	r3, [r3, #0]
}
 8001270:	4618      	mov	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	200001c0 	.word	0x200001c0

08001280 <processTimerScheduler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
processTimerScheduler(void) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
    void (*callbackfunc)(void *);
    void *pPrameter;
    
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 8001286:	2300      	movs	r3, #0
 8001288:	73fb      	strb	r3, [r7, #15]
 800128a:	e068      	b.n	800135e <processTimerScheduler+0xde>
    {
        if ((g_pTimerHandle[i].callbackFunc != NULL) && TimeExpired(i))
 800128c:	7bfa      	ldrb	r2, [r7, #15]
 800128e:	4938      	ldr	r1, [pc, #224]	; (8001370 <processTimerScheduler+0xf0>)
 8001290:	4613      	mov	r3, r2
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	4413      	add	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	440b      	add	r3, r1
 800129a:	3310      	adds	r3, #16
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d05a      	beq.n	8001358 <processTimerScheduler+0xd8>
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 f865 	bl	8001374 <TimeExpired>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d053      	beq.n	8001358 <processTimerScheduler+0xd8>
        {
            callbackfunc = g_pTimerHandle[i].callbackFunc;
 80012b0:	7bfa      	ldrb	r2, [r7, #15]
 80012b2:	492f      	ldr	r1, [pc, #188]	; (8001370 <processTimerScheduler+0xf0>)
 80012b4:	4613      	mov	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	440b      	add	r3, r1
 80012be:	3310      	adds	r3, #16
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	60bb      	str	r3, [r7, #8]
            pPrameter = g_pTimerHandle[i].pCallbackData;
 80012c4:	7bfa      	ldrb	r2, [r7, #15]
 80012c6:	492a      	ldr	r1, [pc, #168]	; (8001370 <processTimerScheduler+0xf0>)
 80012c8:	4613      	mov	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	440b      	add	r3, r1
 80012d2:	3314      	adds	r3, #20
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	607b      	str	r3, [r7, #4]
            DBG_TIMER_SEND_NUM(g_pTimerHandle[i].repeats);
            DBG_TIMER_SEND_STR(", CB = ");
            DBG_TIMER_SEND_NUM((uint32_t)callbackfunc);
            DBG_TIMER_SEND_STR("\n");
            
            if ((g_pTimerHandle[i].repeats != TIMER_REPEAT_FOREVER) && \
 80012d8:	7bfa      	ldrb	r2, [r7, #15]
 80012da:	4925      	ldr	r1, [pc, #148]	; (8001370 <processTimerScheduler+0xf0>)
 80012dc:	4613      	mov	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	4413      	add	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	440b      	add	r3, r1
 80012e6:	330c      	adds	r3, #12
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2bff      	cmp	r3, #255	; 0xff
 80012ee:	d020      	beq.n	8001332 <processTimerScheduler+0xb2>
                (g_pTimerHandle[i].repeats != TIMER_REPEAT_ONE_TIME))
 80012f0:	7bfa      	ldrb	r2, [r7, #15]
 80012f2:	491f      	ldr	r1, [pc, #124]	; (8001370 <processTimerScheduler+0xf0>)
 80012f4:	4613      	mov	r3, r2
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	4413      	add	r3, r2
 80012fa:	00db      	lsls	r3, r3, #3
 80012fc:	440b      	add	r3, r1
 80012fe:	330c      	adds	r3, #12
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	b2db      	uxtb	r3, r3
            if ((g_pTimerHandle[i].repeats != TIMER_REPEAT_FOREVER) && \
 8001304:	2b00      	cmp	r3, #0
 8001306:	d014      	beq.n	8001332 <processTimerScheduler+0xb2>
                 g_pTimerHandle[i].repeats--;
 8001308:	7bfa      	ldrb	r2, [r7, #15]
 800130a:	4919      	ldr	r1, [pc, #100]	; (8001370 <processTimerScheduler+0xf0>)
 800130c:	4613      	mov	r3, r2
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	4413      	add	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	440b      	add	r3, r1
 8001316:	330c      	adds	r3, #12
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	b2db      	uxtb	r3, r3
 800131c:	3b01      	subs	r3, #1
 800131e:	b2d8      	uxtb	r0, r3
 8001320:	4913      	ldr	r1, [pc, #76]	; (8001370 <processTimerScheduler+0xf0>)
 8001322:	4613      	mov	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	4413      	add	r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	440b      	add	r3, r1
 800132c:	330c      	adds	r3, #12
 800132e:	4602      	mov	r2, r0
 8001330:	701a      	strb	r2, [r3, #0]
            
            if (g_pTimerHandle[i].repeats == TIMER_REPEAT_ONE_TIME) {
 8001332:	7bfa      	ldrb	r2, [r7, #15]
 8001334:	490e      	ldr	r1, [pc, #56]	; (8001370 <processTimerScheduler+0xf0>)
 8001336:	4613      	mov	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	4413      	add	r3, r2
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	440b      	add	r3, r1
 8001340:	330c      	adds	r3, #12
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d103      	bne.n	8001352 <processTimerScheduler+0xd2>
                 DBG_TIMER_SEND_STR("$ CANCEL \n");
                 TimerStop(i);
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff3b 	bl	80011c8 <TimerStop>
            }
            
            callbackfunc(pPrameter);
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	4798      	blx	r3
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	3301      	adds	r3, #1
 800135c:	73fb      	strb	r3, [r7, #15]
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	2b0f      	cmp	r3, #15
 8001362:	d993      	bls.n	800128c <processTimerScheduler+0xc>
        }
    }
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000040 	.word	0x20000040

08001374 <TimeExpired>:
 * @retval TRUE or FALSE
 */
uint8_t
TimeExpired(
    uint8_t byTimerId
) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
    uint32_t wMilSecTick;
    uint32_t wDeltaMilSec = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001382:	b672      	cpsid	i
}
 8001384:	bf00      	nop
    
    __disable_irq();
    wMilSecTick = GetMilSecTick();
 8001386:	f7ff ff6f 	bl	8001268 <GetMilSecTick>
 800138a:	60b8      	str	r0, [r7, #8]
    if ((byTimerId >= MAX_TIMER) || (g_pTimerHandle[byTimerId].callbackFunc == NULL))
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	2b0f      	cmp	r3, #15
 8001390:	d80a      	bhi.n	80013a8 <TimeExpired+0x34>
 8001392:	79fa      	ldrb	r2, [r7, #7]
 8001394:	492b      	ldr	r1, [pc, #172]	; (8001444 <TimeExpired+0xd0>)
 8001396:	4613      	mov	r3, r2
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	4413      	add	r3, r2
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	440b      	add	r3, r1
 80013a0:	3310      	adds	r3, #16
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d103      	bne.n	80013b0 <TimeExpired+0x3c>
  __ASM volatile ("cpsie i" : : : "memory");
 80013a8:	b662      	cpsie	i
}
 80013aa:	bf00      	nop
    {
    	__enable_irq();
        return 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	e044      	b.n	800143a <TimeExpired+0xc6>
    }
      
    if (wMilSecTick >= g_pTimerHandle[byTimerId].milSecStart) 
 80013b0:	79fa      	ldrb	r2, [r7, #7]
 80013b2:	4924      	ldr	r1, [pc, #144]	; (8001444 <TimeExpired+0xd0>)
 80013b4:	4613      	mov	r3, r2
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	4413      	add	r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	440b      	add	r3, r1
 80013be:	3304      	adds	r3, #4
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d30c      	bcc.n	80013e2 <TimeExpired+0x6e>
    {
        wDeltaMilSec = wMilSecTick - g_pTimerHandle[byTimerId].milSecStart;
 80013c8:	79fa      	ldrb	r2, [r7, #7]
 80013ca:	491e      	ldr	r1, [pc, #120]	; (8001444 <TimeExpired+0xd0>)
 80013cc:	4613      	mov	r3, r2
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	4413      	add	r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	440b      	add	r3, r1
 80013d6:	3304      	adds	r3, #4
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	e00e      	b.n	8001400 <TimeExpired+0x8c>
    } 
    else
    {
        wDeltaMilSec = g_pTimerHandle[byTimerId].milSecStart - wMilSecTick;
 80013e2:	79fa      	ldrb	r2, [r7, #7]
 80013e4:	4917      	ldr	r1, [pc, #92]	; (8001444 <TimeExpired+0xd0>)
 80013e6:	4613      	mov	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4413      	add	r3, r2
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	440b      	add	r3, r1
 80013f0:	3304      	adds	r3, #4
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	60fb      	str	r3, [r7, #12]
        wDeltaMilSec = 0xFFFFFFFFU - wDeltaMilSec;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	60fb      	str	r3, [r7, #12]
    }
    
    if (wDeltaMilSec < g_pTimerHandle[byTimerId].milSecTimeout)
 8001400:	79fa      	ldrb	r2, [r7, #7]
 8001402:	4910      	ldr	r1, [pc, #64]	; (8001444 <TimeExpired+0xd0>)
 8001404:	4613      	mov	r3, r2
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	4413      	add	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	440b      	add	r3, r1
 800140e:	3308      	adds	r3, #8
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	429a      	cmp	r2, r3
 8001416:	d203      	bcs.n	8001420 <TimeExpired+0xac>
  __ASM volatile ("cpsie i" : : : "memory");
 8001418:	b662      	cpsie	i
}
 800141a:	bf00      	nop
    {
    	__enable_irq();
        return 0;
 800141c:	2300      	movs	r3, #0
 800141e:	e00c      	b.n	800143a <TimeExpired+0xc6>
    }
    
    g_pTimerHandle[byTimerId].milSecStart = wMilSecTick;
 8001420:	79fa      	ldrb	r2, [r7, #7]
 8001422:	4908      	ldr	r1, [pc, #32]	; (8001444 <TimeExpired+0xd0>)
 8001424:	4613      	mov	r3, r2
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	4413      	add	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	440b      	add	r3, r1
 800142e:	3304      	adds	r3, #4
 8001430:	68ba      	ldr	r2, [r7, #8]
 8001432:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001434:	b662      	cpsie	i
}
 8001436:	bf00      	nop
    
    __enable_irq();
    
    return 1;
 8001438:	2301      	movs	r3, #1
}
 800143a:	4618      	mov	r0, r3
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000040 	.word	0x20000040

08001448 <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <SysTick_Handler+0x18>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	3301      	adds	r3, #1
 8001452:	4a03      	ldr	r2, [pc, #12]	; (8001460 <SysTick_Handler+0x18>)
 8001454:	6013      	str	r3, [r2, #0]
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	200001c0 	.word	0x200001c0

08001464 <USART2_IRQHandler>:
 *   This parameter can be one of the following values:
 *   UART1_IDX, UART2_IDX
 * @retval None
 */
void
USART2_IRQHandler(void) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800146a:	b672      	cpsid	i
}
 800146c:	bf00      	nop
	__disable_irq();
    if (USART_GetITStatus(USART2, USART_IT_RXNE) == SET) {
 800146e:	f240 5125 	movw	r1, #1317	; 0x525
 8001472:	480f      	ldr	r0, [pc, #60]	; (80014b0 <USART2_IRQHandler+0x4c>)
 8001474:	f7ff fdc2 	bl	8000ffc <USART_GetITStatus>
 8001478:	4603      	mov	r3, r0
 800147a:	2b01      	cmp	r3, #1
 800147c:	d112      	bne.n	80014a4 <USART2_IRQHandler+0x40>
        buffqueue_p pUartBuffQueueRx = (buffqueue_p) g_pUartQueueRx[0];
 800147e:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <USART2_IRQHandler+0x50>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	607b      	str	r3, [r7, #4]
        uint8_t byReceiverData = USART_ReceiveData(USART2);
 8001484:	480a      	ldr	r0, [pc, #40]	; (80014b0 <USART2_IRQHandler+0x4c>)
 8001486:	f7ff fda9 	bl	8000fdc <USART_ReceiveData>
 800148a:	4603      	mov	r3, r0
 800148c:	b2db      	uxtb	r3, r3
 800148e:	70fb      	strb	r3, [r7, #3]
        if (bufEnDat(pUartBuffQueueRx, &byReceiverData) == ERR_BUF_FULL) {}
 8001490:	1cfb      	adds	r3, r7, #3
 8001492:	4619      	mov	r1, r3
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 f822 	bl	80014de <bufEnDat>
        USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 800149a:	f240 5125 	movw	r1, #1317	; 0x525
 800149e:	4804      	ldr	r0, [pc, #16]	; (80014b0 <USART2_IRQHandler+0x4c>)
 80014a0:	f7ff fe07 	bl	80010b2 <USART_ClearITPendingBit>
  __ASM volatile ("cpsie i" : : : "memory");
 80014a4:	b662      	cpsie	i
}
 80014a6:	bf00      	nop
    }
    __enable_irq();
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40004400 	.word	0x40004400
 80014b4:	200001c4 	.word	0x200001c4

080014b8 <bufIsFull>:
 * @return 1 if full; 0 otherwise
 */
uint8_t
bufIsFull(
    buffqueue_p pQueue
) {
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
    return (pQueue->wCountEle >= pQueue->wSize);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	885a      	ldrh	r2, [r3, #2]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	bf2c      	ite	cs
 80014cc:	2301      	movcs	r3, #1
 80014ce:	2300      	movcc	r3, #0
 80014d0:	b2db      	uxtb	r3, r3
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <bufEnDat>:
 */
uint8_t
bufEnDat(
    buffqueue_p pQueue,
	uint8_t *pReceiverData
) {
 80014de:	b580      	push	{r7, lr}
 80014e0:	b084      	sub	sp, #16
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80014e8:	b672      	cpsid	i
}
 80014ea:	bf00      	nop
	__disable_irq();
    
    /* Place data in buffer */
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 80014ec:	2300      	movs	r3, #0
 80014ee:	73fb      	strb	r3, [r7, #15]
 80014f0:	e021      	b.n	8001536 <bufEnDat+0x58>
        pQueue->pData[pQueue->wHeadIndex] = pReceiverData[i];
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	441a      	add	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	88c9      	ldrh	r1, [r1, #6]
 8001500:	440b      	add	r3, r1
 8001502:	7812      	ldrb	r2, [r2, #0]
 8001504:	701a      	strb	r2, [r3, #0]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1)  & (pQueue->wSize - 1));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	88db      	ldrh	r3, [r3, #6]
 800150a:	3301      	adds	r3, #1
 800150c:	b29b      	uxth	r3, r3
 800150e:	b21a      	sxth	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	3b01      	subs	r3, #1
 8001516:	b29b      	uxth	r3, r3
 8001518:	b21b      	sxth	r3, r3
 800151a:	4013      	ands	r3, r2
 800151c:	b21b      	sxth	r3, r3
 800151e:	b29a      	uxth	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	80da      	strh	r2, [r3, #6]
        pQueue->wCountEle++;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	885b      	ldrh	r3, [r3, #2]
 8001528:	3301      	adds	r3, #1
 800152a:	b29a      	uxth	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	3301      	adds	r3, #1
 8001534:	73fb      	strb	r3, [r7, #15]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	791b      	ldrb	r3, [r3, #4]
 800153a:	7bfa      	ldrb	r2, [r7, #15]
 800153c:	429a      	cmp	r2, r3
 800153e:	d3d8      	bcc.n	80014f2 <bufEnDat+0x14>
    }
    
    if (bufIsFull(pQueue)) {
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff ffb9 	bl	80014b8 <bufIsFull>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d011      	beq.n	8001570 <bufEnDat+0x92>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wTailIndex = (pQueue->wTailIndex + pQueue->byItemSize) & (pQueue->wSize - 1);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	891a      	ldrh	r2, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	791b      	ldrb	r3, [r3, #4]
 8001554:	b29b      	uxth	r3, r3
 8001556:	4413      	add	r3, r2
 8001558:	b29b      	uxth	r3, r3
 800155a:	b21a      	sxth	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	881b      	ldrh	r3, [r3, #0]
 8001560:	3b01      	subs	r3, #1
 8001562:	b29b      	uxth	r3, r3
 8001564:	b21b      	sxth	r3, r3
 8001566:	4013      	ands	r3, r2
 8001568:	b21b      	sxth	r3, r3
 800156a:	b29a      	uxth	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	811a      	strh	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8001570:	b662      	cpsie	i
}
 8001572:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <memsetl>:
void
memsetl(
	uint8_t *dst,
	uint8_t value,
	uint16_t size
) {
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	460b      	mov	r3, r1
 8001588:	70fb      	strb	r3, [r7, #3]
 800158a:	4613      	mov	r3, r2
 800158c:	803b      	strh	r3, [r7, #0]
    while (size--) {
 800158e:	e004      	b.n	800159a <memsetl+0x1c>
        *dst++ = value;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	78fa      	ldrb	r2, [r7, #3]
 8001598:	701a      	strb	r2, [r3, #0]
    while (size--) {
 800159a:	883b      	ldrh	r3, [r7, #0]
 800159c:	1e5a      	subs	r2, r3, #1
 800159e:	803a      	strh	r2, [r7, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1f5      	bne.n	8001590 <memsetl+0x12>
    }    
}
 80015a4:	bf00      	nop
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <main>:
/******************************************************************************/

/******************************************************************************/

int main(void_t)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	af00      	add	r7, sp, #0
	appInitCommon();
 80015b6:	f000 f805 	bl	80015c4 <appInitCommon>
	while(1)
		{
			sendNumberPress();
 80015ba:	f000 f8b7 	bl	800172c <sendNumberPress>
			processTimerScheduler();
 80015be:	f7ff fe5f 	bl	8001280 <processTimerScheduler>
			sendNumberPress();
 80015c2:	e7fa      	b.n	80015ba <main+0x8>

080015c4 <appInitCommon>:
 * @brief  Initialize peripheral
 * @param  None
 * @retval None
 */
static void_t appInitCommon(void_t)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	SystemCoreClockUpdate();
 80015c8:	f7fe fe3a 	bl	8000240 <SystemCoreClockUpdate>
	TimerInit();
 80015cc:	f7ff fdda 	bl	8001184 <TimerInit>
	USART2_Init();
 80015d0:	f000 f8f6 	bl	80017c0 <USART2_Init>
	timer_InitCapture();
 80015d4:	f000 f802 	bl	80015dc <timer_InitCapture>
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}

080015dc <timer_InitCapture>:
 * @brief  Initialize timer mode inputcapture
 * @param  None
 * @retval None
 */
static void_t timer_InitCapture(void_t)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef 	TIM_TimeBaseInitStruct;
	TIM_ICInitTypeDef			TIM_ICInitStruct;
	NVIC_InitTypeDef			NVIC_InitStruct;

	// GPIO Configure
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80015e2:	2101      	movs	r1, #1
 80015e4:	2002      	movs	r0, #2
 80015e6:	f7ff f8e7 	bl	80007b8 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 80015ea:	2302      	movs	r3, #2
 80015ec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80015f0:	2300      	movs	r3, #0
 80015f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 80015fc:	2302      	movs	r3, #2
 80015fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3;
 8001602:	2308      	movs	r3, #8
 8001604:	623b      	str	r3, [r7, #32]
	GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001606:	f107 0320 	add.w	r3, r7, #32
 800160a:	4619      	mov	r1, r3
 800160c:	4824      	ldr	r0, [pc, #144]	; (80016a0 <timer_InitCapture+0xc4>)
 800160e:	f7fe ff4d 	bl	80004ac <GPIO_Init>

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource3, GPIO_AF_TIM2);
 8001612:	2201      	movs	r2, #1
 8001614:	2103      	movs	r1, #3
 8001616:	4822      	ldr	r0, [pc, #136]	; (80016a0 <timer_InitCapture+0xc4>)
 8001618:	f7fe ffd7 	bl	80005ca <GPIO_PinAFConfig>

	//TimeBase Configure

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800161c:	2101      	movs	r1, #1
 800161e:	2001      	movs	r0, #1
 8001620:	f7ff f8ea 	bl	80007f8 <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
 8001624:	2300      	movs	r3, #0
 8001626:	82fb      	strh	r3, [r7, #22]
	TIM_TimeBaseInitStruct.TIM_Prescaler = 41999;
 8001628:	f24a 430f 	movw	r3, #41999	; 0xa40f
 800162c:	82bb      	strh	r3, [r7, #20]
	TIM_TimeBaseInitStruct.TIM_Period = 0xFFFF;
 800162e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001632:	61bb      	str	r3, [r7, #24]
	TIM_TimeBaseInitStruct.TIM_ClockDivision = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	83bb      	strh	r3, [r7, #28]
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseInitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001642:	f7ff f8f9 	bl	8000838 <TIM_TimeBaseInit>


	//TimeIC Configure

	TIM_ICInitStruct.TIM_Channel = TIM_Channel_2;
 8001646:	2304      	movs	r3, #4
 8001648:	813b      	strh	r3, [r7, #8]
	TIM_ICInitStruct.TIM_ICPolarity = TIM_ICPolarity_BothEdge;
 800164a:	230a      	movs	r3, #10
 800164c:	817b      	strh	r3, [r7, #10]
	TIM_ICInitStruct.TIM_ICSelection = TIM_ICSelection_DirectTI;
 800164e:	2301      	movs	r3, #1
 8001650:	81bb      	strh	r3, [r7, #12]
	TIM_ICInitStruct.TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8001652:	2300      	movs	r3, #0
 8001654:	81fb      	strh	r3, [r7, #14]
	TIM_ICInitStruct.TIM_ICFilter = 0x0;
 8001656:	2300      	movs	r3, #0
 8001658:	823b      	strh	r3, [r7, #16]
	TIM_ICInit(TIM2, &TIM_ICInitStruct);
 800165a:	f107 0308 	add.w	r3, r7, #8
 800165e:	4619      	mov	r1, r3
 8001660:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001664:	f7ff f974 	bl	8000950 <TIM_ICInit>

	TIM_Cmd(TIM2, ENABLE);
 8001668:	2101      	movs	r1, #1
 800166a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800166e:	f7ff f94f 	bl	8000910 <TIM_Cmd>

	// Interrupt Configure

	TIM_ITConfig(TIM2, TIM_IT_CC2, ENABLE);
 8001672:	2201      	movs	r2, #1
 8001674:	2104      	movs	r1, #4
 8001676:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800167a:	f7ff fa3d 	bl	8000af8 <TIM_ITConfig>

	NVIC_InitStruct.NVIC_IRQChannel = TIM2_IRQn;
 800167e:	231c      	movs	r3, #28
 8001680:	713b      	strb	r3, [r7, #4]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	717b      	strb	r3, [r7, #5]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 800168a:	2301      	movs	r3, #1
 800168c:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStruct);
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe fea9 	bl	80003e8 <NVIC_Init>

}
 8001696:	bf00      	nop
 8001698:	3728      	adds	r7, #40	; 0x28
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40020400 	.word	0x40020400

080016a4 <TIM2_IRQHandler>:
 * @brief  Timer interrupt
 * @param  None
 * @retval None
 */
void_t TIM2_IRQHandler(void_t)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	if(TIM_GetITStatus(TIM2, TIM_IT_CC2) != RESET)
 80016a8:	2104      	movs	r1, #4
 80016aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80016ae:	f7ff fa47 	bl	8000b40 <TIM_GetITStatus>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <TIM2_IRQHandler+0x18>
	{
		checkTimePress();
 80016b8:	f000 f808 	bl	80016cc <checkTimePress>
	}
	TIM_ClearITPendingBit(TIM2, TIM_IT_CC2);
 80016bc:	2104      	movs	r1, #4
 80016be:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80016c2:	f7ff fa67 	bl	8000b94 <TIM_ClearITPendingBit>
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <checkTimePress>:
 * @brief  Check number when press button
 * @param  None
 * @retval None
 */
static void_t checkTimePress(void_t)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	g_byStatus = 0;
 80016d0:	4b13      	ldr	r3, [pc, #76]	; (8001720 <checkTimePress+0x54>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	701a      	strb	r2, [r3, #0]
	g_byStatus = !g_byStatus;
 80016d6:	4b12      	ldr	r3, [pc, #72]	; (8001720 <checkTimePress+0x54>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	bf0c      	ite	eq
 80016de:	2301      	moveq	r3, #1
 80016e0:	2300      	movne	r3, #0
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <checkTimePress+0x54>)
 80016e8:	701a      	strb	r2, [r3, #0]

	if(g_byStatus == HIGH_STATUS)
 80016ea:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <checkTimePress+0x54>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d105      	bne.n	80016fe <checkTimePress+0x32>
	{
		g_dwNumberPress++;
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <checkTimePress+0x58>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	3301      	adds	r3, #1
 80016f8:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <checkTimePress+0x58>)
 80016fa:	6013      	str	r3, [r2, #0]
	{
		g_dwTimRising = TIM_GetCapture2(TIM2);
		g_byStatus = HIGH_STATUS;
	}

}
 80016fc:	e00d      	b.n	800171a <checkTimePress+0x4e>
	else if(g_byStatus == LOW_STATUS)
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <checkTimePress+0x54>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d109      	bne.n	800171a <checkTimePress+0x4e>
		g_dwTimRising = TIM_GetCapture2(TIM2);
 8001706:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800170a:	f7ff f975 	bl	80009f8 <TIM_GetCapture2>
 800170e:	4603      	mov	r3, r0
 8001710:	4a05      	ldr	r2, [pc, #20]	; (8001728 <checkTimePress+0x5c>)
 8001712:	6013      	str	r3, [r2, #0]
		g_byStatus = HIGH_STATUS;
 8001714:	4b02      	ldr	r3, [pc, #8]	; (8001720 <checkTimePress+0x54>)
 8001716:	2201      	movs	r2, #1
 8001718:	701a      	strb	r2, [r3, #0]
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200001d4 	.word	0x200001d4
 8001724:	200001cc 	.word	0x200001cc
 8001728:	200001d0 	.word	0x200001d0

0800172c <sendNumberPress>:
 * @param  None
 * @retval None
 */

static void_t sendNumberPress(void_t)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
	u32_t dwTimeCurrent;
	static u32_t dwTimeTotal, dwTimeInit;
	if(g_byStatus == HIGH_STATUS)
 8001732:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <sendNumberPress+0x80>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d133      	bne.n	80017a2 <sendNumberPress+0x76>
	{


		dwTimeCurrent = GetMilSecTick();
 800173a:	f7ff fd95 	bl	8001268 <GetMilSecTick>
 800173e:	6078      	str	r0, [r7, #4]

		if(dwTimeCurrent >= dwTimeInit)
 8001740:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <sendNumberPress+0x84>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	429a      	cmp	r2, r3
 8001748:	d309      	bcc.n	800175e <sendNumberPress+0x32>
		{
			dwTimeTotal += dwTimeCurrent - dwTimeInit;
 800174a:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <sendNumberPress+0x84>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	1ad2      	subs	r2, r2, r3
 8001752:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <sendNumberPress+0x88>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4413      	add	r3, r2
 8001758:	4a16      	ldr	r2, [pc, #88]	; (80017b4 <sendNumberPress+0x88>)
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	e009      	b.n	8001772 <sendNumberPress+0x46>
		}
		else
		{
			dwTimeTotal += 0xFFFFFFFFU - dwTimeCurrent + dwTimeInit;
 800175e:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <sendNumberPress+0x84>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	1ad2      	subs	r2, r2, r3
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <sendNumberPress+0x88>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4413      	add	r3, r2
 800176c:	3b01      	subs	r3, #1
 800176e:	4a11      	ldr	r2, [pc, #68]	; (80017b4 <sendNumberPress+0x88>)
 8001770:	6013      	str	r3, [r2, #0]
		}

		if(dwTimeTotal >= TIME_LIMIT_SEND_DATA)
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <sendNumberPress+0x88>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800177a:	d30f      	bcc.n	800179c <sendNumberPress+0x70>
		{
			dwTimeTotal = 0;
 800177c:	4b0d      	ldr	r3, [pc, #52]	; (80017b4 <sendNumberPress+0x88>)
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
			USART_SendData(USART2, g_dwNumberPress);
 8001782:	4b0d      	ldr	r3, [pc, #52]	; (80017b8 <sendNumberPress+0x8c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	b29b      	uxth	r3, r3
 8001788:	4619      	mov	r1, r3
 800178a:	480c      	ldr	r0, [pc, #48]	; (80017bc <sendNumberPress+0x90>)
 800178c:	f7ff fc14 	bl	8000fb8 <USART_SendData>
			g_byStatus = LOW_STATUS;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <sendNumberPress+0x80>)
 8001792:	2201      	movs	r2, #1
 8001794:	701a      	strb	r2, [r3, #0]
			g_dwNumberPress = 0;
 8001796:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <sendNumberPress+0x8c>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
		}
		dwTimeInit = dwTimeCurrent;
 800179c:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <sendNumberPress+0x84>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6013      	str	r3, [r2, #0]
	}
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200001d4 	.word	0x200001d4
 80017b0:	200001d8 	.word	0x200001d8
 80017b4:	200001dc 	.word	0x200001dc
 80017b8:	200001cc 	.word	0x200001cc
 80017bc:	40004400 	.word	0x40004400

080017c0 <USART2_Init>:
 * @brief  Initialize USART2
 * @param  None
 * @retval None
 */
static void_t USART2_Init(void_t)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef 					GPIO_InitStruct;
	USART_InitTypeDef					USART_InitStruct;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80017c6:	2101      	movs	r1, #1
 80017c8:	2001      	movs	r0, #1
 80017ca:	f7fe fff5 	bl	80007b8 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 80017ce:	2302      	movs	r3, #2
 80017d0:	753b      	strb	r3, [r7, #20]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 80017d2:	2303      	movs	r3, #3
 80017d4:	757b      	strb	r3, [r7, #21]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 80017d6:	2300      	movs	r3, #0
 80017d8:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_UP;
 80017da:	2301      	movs	r3, #1
 80017dc:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_2;
 80017de:	2304      	movs	r3, #4
 80017e0:	613b      	str	r3, [r7, #16]
	GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	f107 0310 	add.w	r3, r7, #16
 80017e6:	4619      	mov	r1, r3
 80017e8:	4813      	ldr	r0, [pc, #76]	; (8001838 <USART2_Init+0x78>)
 80017ea:	f7fe fe5f 	bl	80004ac <GPIO_Init>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 80017ee:	2207      	movs	r2, #7
 80017f0:	2102      	movs	r1, #2
 80017f2:	4811      	ldr	r0, [pc, #68]	; (8001838 <USART2_Init+0x78>)
 80017f4:	f7fe fee9 	bl	80005ca <GPIO_PinAFConfig>

	//Enable USART

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 80017f8:	2101      	movs	r1, #1
 80017fa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80017fe:	f7fe fffb 	bl	80007f8 <RCC_APB1PeriphClockCmd>

	USART_InitStruct.USART_BaudRate = 9600;
 8001802:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001806:	603b      	str	r3, [r7, #0]
	USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001808:	2300      	movs	r3, #0
 800180a:	81bb      	strh	r3, [r7, #12]
	USART_InitStruct.USART_Mode = USART_Mode_Tx;
 800180c:	2308      	movs	r3, #8
 800180e:	817b      	strh	r3, [r7, #10]
	USART_InitStruct.USART_Parity = USART_Parity_No;
 8001810:	2300      	movs	r3, #0
 8001812:	813b      	strh	r3, [r7, #8]
	USART_InitStruct.USART_StopBits = USART_StopBits_1;
 8001814:	2300      	movs	r3, #0
 8001816:	80fb      	strh	r3, [r7, #6]
	USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 8001818:	2300      	movs	r3, #0
 800181a:	80bb      	strh	r3, [r7, #4]

	USART_Init(USART2, &USART_InitStruct);
 800181c:	463b      	mov	r3, r7
 800181e:	4619      	mov	r1, r3
 8001820:	4806      	ldr	r0, [pc, #24]	; (800183c <USART2_Init+0x7c>)
 8001822:	f7ff faef 	bl	8000e04 <USART_Init>

	USART_Cmd(USART2, ENABLE);
 8001826:	2101      	movs	r1, #1
 8001828:	4804      	ldr	r0, [pc, #16]	; (800183c <USART2_Init+0x7c>)
 800182a:	f7ff fba5 	bl	8000f78 <USART_Cmd>
}
 800182e:	bf00      	nop
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40020000 	.word	0x40020000
 800183c:	40004400 	.word	0x40004400

08001840 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001840:	480d      	ldr	r0, [pc, #52]	; (8001878 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001842:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001844:	f7fe fcc6 	bl	80001d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001848:	480c      	ldr	r0, [pc, #48]	; (800187c <LoopForever+0x6>)
  ldr r1, =_edata
 800184a:	490d      	ldr	r1, [pc, #52]	; (8001880 <LoopForever+0xa>)
  ldr r2, =_sidata
 800184c:	4a0d      	ldr	r2, [pc, #52]	; (8001884 <LoopForever+0xe>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001850:	e002      	b.n	8001858 <LoopCopyDataInit>

08001852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001856:	3304      	adds	r3, #4

08001858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800185a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800185c:	d3f9      	bcc.n	8001852 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001860:	4c0a      	ldr	r4, [pc, #40]	; (800188c <LoopForever+0x16>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001864:	e001      	b.n	800186a <LoopFillZerobss>

08001866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001868:	3204      	adds	r2, #4

0800186a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800186a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800186c:	d3fb      	bcc.n	8001866 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800186e:	f000 f811 	bl	8001894 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001872:	f7ff fe9e 	bl	80015b2 <main>

08001876 <LoopForever>:

LoopForever:
    b LoopForever
 8001876:	e7fe      	b.n	8001876 <LoopForever>
  ldr   r0, =_estack
 8001878:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800187c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001880:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001884:	080018fc 	.word	0x080018fc
  ldr r2, =_sbss
 8001888:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 800188c:	200001e0 	.word	0x200001e0

08001890 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001890:	e7fe      	b.n	8001890 <ADC_IRQHandler>
	...

08001894 <__libc_init_array>:
 8001894:	b570      	push	{r4, r5, r6, lr}
 8001896:	4d0d      	ldr	r5, [pc, #52]	; (80018cc <__libc_init_array+0x38>)
 8001898:	4c0d      	ldr	r4, [pc, #52]	; (80018d0 <__libc_init_array+0x3c>)
 800189a:	1b64      	subs	r4, r4, r5
 800189c:	10a4      	asrs	r4, r4, #2
 800189e:	2600      	movs	r6, #0
 80018a0:	42a6      	cmp	r6, r4
 80018a2:	d109      	bne.n	80018b8 <__libc_init_array+0x24>
 80018a4:	4d0b      	ldr	r5, [pc, #44]	; (80018d4 <__libc_init_array+0x40>)
 80018a6:	4c0c      	ldr	r4, [pc, #48]	; (80018d8 <__libc_init_array+0x44>)
 80018a8:	f000 f818 	bl	80018dc <_init>
 80018ac:	1b64      	subs	r4, r4, r5
 80018ae:	10a4      	asrs	r4, r4, #2
 80018b0:	2600      	movs	r6, #0
 80018b2:	42a6      	cmp	r6, r4
 80018b4:	d105      	bne.n	80018c2 <__libc_init_array+0x2e>
 80018b6:	bd70      	pop	{r4, r5, r6, pc}
 80018b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80018bc:	4798      	blx	r3
 80018be:	3601      	adds	r6, #1
 80018c0:	e7ee      	b.n	80018a0 <__libc_init_array+0xc>
 80018c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80018c6:	4798      	blx	r3
 80018c8:	3601      	adds	r6, #1
 80018ca:	e7f2      	b.n	80018b2 <__libc_init_array+0x1e>
 80018cc:	080018f4 	.word	0x080018f4
 80018d0:	080018f4 	.word	0x080018f4
 80018d4:	080018f4 	.word	0x080018f4
 80018d8:	080018f8 	.word	0x080018f8

080018dc <_init>:
 80018dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018de:	bf00      	nop
 80018e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018e2:	bc08      	pop	{r3}
 80018e4:	469e      	mov	lr, r3
 80018e6:	4770      	bx	lr

080018e8 <_fini>:
 80018e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ea:	bf00      	nop
 80018ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018ee:	bc08      	pop	{r3}
 80018f0:	469e      	mov	lr, r3
 80018f2:	4770      	bx	lr
