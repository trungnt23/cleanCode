
TS_CURTAIN_MCU_V1.0.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012a4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001438  08001438  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001438  08001438  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08001438  08001438  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001438  08001438  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001438  08001438  00011438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800143c  0800143c  0001143c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08001440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  20000024  08001464  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  08001464  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000562d  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000163f  00000000  00000000  00025681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000678  00000000  00000000  00026cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005b0  00000000  00000000  00027338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000bd5b  00000000  00000000  000278e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000621a  00000000  00000000  00033643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00040409  00000000  00000000  0003985d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00079c66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019d4  00000000  00000000  00079cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000024 	.word	0x20000024
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001420 	.word	0x08001420

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000028 	.word	0x20000028
 80001d0:	08001420 	.word	0x08001420

080001d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d8:	4b16      	ldr	r3, [pc, #88]	; (8000234 <SystemInit+0x60>)
 80001da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001de:	4a15      	ldr	r2, [pc, #84]	; (8000234 <SystemInit+0x60>)
 80001e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80001e8:	4b13      	ldr	r3, [pc, #76]	; (8000238 <SystemInit+0x64>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a12      	ldr	r2, [pc, #72]	; (8000238 <SystemInit+0x64>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80001f4:	4b10      	ldr	r3, [pc, #64]	; (8000238 <SystemInit+0x64>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001fa:	4b0f      	ldr	r3, [pc, #60]	; (8000238 <SystemInit+0x64>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a0e      	ldr	r2, [pc, #56]	; (8000238 <SystemInit+0x64>)
 8000200:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000208:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800020a:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <SystemInit+0x64>)
 800020c:	4a0b      	ldr	r2, [pc, #44]	; (800023c <SystemInit+0x68>)
 800020e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000210:	4b09      	ldr	r3, [pc, #36]	; (8000238 <SystemInit+0x64>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a08      	ldr	r2, [pc, #32]	; (8000238 <SystemInit+0x64>)
 8000216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800021a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <SystemInit+0x64>)
 800021e:	2200      	movs	r2, #0
 8000220:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000222:	f000 f88f 	bl	8000344 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <SystemInit+0x60>)
 8000228:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800022c:	609a      	str	r2, [r3, #8]
#endif
}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	e000ed00 	.word	0xe000ed00
 8000238:	40023800 	.word	0x40023800
 800023c:	24003010 	.word	0x24003010

08000240 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000240:	b480      	push	{r7}
 8000242:	b087      	sub	sp, #28
 8000244:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000246:	2300      	movs	r3, #0
 8000248:	613b      	str	r3, [r7, #16]
 800024a:	2300      	movs	r3, #0
 800024c:	617b      	str	r3, [r7, #20]
 800024e:	2302      	movs	r3, #2
 8000250:	60fb      	str	r3, [r7, #12]
 8000252:	2300      	movs	r3, #0
 8000254:	60bb      	str	r3, [r7, #8]
 8000256:	2302      	movs	r3, #2
 8000258:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800025a:	4b35      	ldr	r3, [pc, #212]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 800025c:	689b      	ldr	r3, [r3, #8]
 800025e:	f003 030c 	and.w	r3, r3, #12
 8000262:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000264:	693b      	ldr	r3, [r7, #16]
 8000266:	2b08      	cmp	r3, #8
 8000268:	d011      	beq.n	800028e <SystemCoreClockUpdate+0x4e>
 800026a:	693b      	ldr	r3, [r7, #16]
 800026c:	2b08      	cmp	r3, #8
 800026e:	d844      	bhi.n	80002fa <SystemCoreClockUpdate+0xba>
 8000270:	693b      	ldr	r3, [r7, #16]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d003      	beq.n	800027e <SystemCoreClockUpdate+0x3e>
 8000276:	693b      	ldr	r3, [r7, #16]
 8000278:	2b04      	cmp	r3, #4
 800027a:	d004      	beq.n	8000286 <SystemCoreClockUpdate+0x46>
 800027c:	e03d      	b.n	80002fa <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800027e:	4b2d      	ldr	r3, [pc, #180]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000280:	4a2d      	ldr	r2, [pc, #180]	; (8000338 <SystemCoreClockUpdate+0xf8>)
 8000282:	601a      	str	r2, [r3, #0]
      break;
 8000284:	e03d      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000286:	4b2b      	ldr	r3, [pc, #172]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000288:	4a2c      	ldr	r2, [pc, #176]	; (800033c <SystemCoreClockUpdate+0xfc>)
 800028a:	601a      	str	r2, [r3, #0]
      break;
 800028c:	e039      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800028e:	4b28      	ldr	r3, [pc, #160]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	0d9b      	lsrs	r3, r3, #22
 8000294:	f003 0301 	and.w	r3, r3, #1
 8000298:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800029a:	4b25      	ldr	r3, [pc, #148]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002a2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d00c      	beq.n	80002c4 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002aa:	4a24      	ldr	r2, [pc, #144]	; (800033c <SystemCoreClockUpdate+0xfc>)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80002b2:	4a1f      	ldr	r2, [pc, #124]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 80002b4:	6852      	ldr	r2, [r2, #4]
 80002b6:	0992      	lsrs	r2, r2, #6
 80002b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002bc:	fb02 f303 	mul.w	r3, r2, r3
 80002c0:	617b      	str	r3, [r7, #20]
 80002c2:	e00b      	b.n	80002dc <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80002c4:	4a1c      	ldr	r2, [pc, #112]	; (8000338 <SystemCoreClockUpdate+0xf8>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002cc:	4a18      	ldr	r2, [pc, #96]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 80002ce:	6852      	ldr	r2, [r2, #4]
 80002d0:	0992      	lsrs	r2, r2, #6
 80002d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80002d6:	fb02 f303 	mul.w	r3, r2, r3
 80002da:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80002dc:	4b14      	ldr	r3, [pc, #80]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	0c1b      	lsrs	r3, r3, #16
 80002e2:	f003 0303 	and.w	r3, r3, #3
 80002e6:	3301      	adds	r3, #1
 80002e8:	005b      	lsls	r3, r3, #1
 80002ea:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002ec:	697a      	ldr	r2, [r7, #20]
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002f4:	4a0f      	ldr	r2, [pc, #60]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 80002f6:	6013      	str	r3, [r2, #0]
      break;
 80002f8:	e003      	b.n	8000302 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 80002fc:	4a0e      	ldr	r2, [pc, #56]	; (8000338 <SystemCoreClockUpdate+0xf8>)
 80002fe:	601a      	str	r2, [r3, #0]
      break;
 8000300:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000302:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <SystemCoreClockUpdate+0xf0>)
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	091b      	lsrs	r3, r3, #4
 8000308:	f003 030f 	and.w	r3, r3, #15
 800030c:	4a0c      	ldr	r2, [pc, #48]	; (8000340 <SystemCoreClockUpdate+0x100>)
 800030e:	5cd3      	ldrb	r3, [r2, r3]
 8000310:	b2db      	uxtb	r3, r3
 8000312:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000314:	4b07      	ldr	r3, [pc, #28]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	693b      	ldr	r3, [r7, #16]
 800031a:	fa22 f303 	lsr.w	r3, r2, r3
 800031e:	4a05      	ldr	r2, [pc, #20]	; (8000334 <SystemCoreClockUpdate+0xf4>)
 8000320:	6013      	str	r3, [r2, #0]
}
 8000322:	bf00      	nop
 8000324:	371c      	adds	r7, #28
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40023800 	.word	0x40023800
 8000334:	20000000 	.word	0x20000000
 8000338:	00f42400 	.word	0x00f42400
 800033c:	017d7840 	.word	0x017d7840
 8000340:	20000004 	.word	0x20000004

08000344 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
/******************************************************************************/

  /* At this stage the HSI is already enabled and used as System clock source */

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000348:	4b23      	ldr	r3, [pc, #140]	; (80003d8 <SetSysClock+0x94>)
 800034a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800034c:	4a22      	ldr	r2, [pc, #136]	; (80003d8 <SetSysClock+0x94>)
 800034e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000352:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SetSysClock+0x98>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a20      	ldr	r2, [pc, #128]	; (80003dc <SetSysClock+0x98>)
 800035a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800035e:	6013      	str	r3, [r2, #0]

  /* HCLK = SYSCLK / 1*/
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000360:	4b1d      	ldr	r3, [pc, #116]	; (80003d8 <SetSysClock+0x94>)
 8000362:	4a1d      	ldr	r2, [pc, #116]	; (80003d8 <SetSysClock+0x94>)
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	6093      	str	r3, [r2, #8]

  /* PCLK2 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000368:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <SetSysClock+0x94>)
 800036a:	4a1b      	ldr	r2, [pc, #108]	; (80003d8 <SetSysClock+0x94>)
 800036c:	689b      	ldr	r3, [r3, #8]
 800036e:	6093      	str	r3, [r2, #8]
    
  /* PCLK1 = HCLK / 1*/
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000370:	4b19      	ldr	r3, [pc, #100]	; (80003d8 <SetSysClock+0x94>)
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	4a18      	ldr	r2, [pc, #96]	; (80003d8 <SetSysClock+0x94>)
 8000376:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800037a:	6093      	str	r3, [r2, #8]

  /* Configure the main PLL */
  RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800037c:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <SetSysClock+0x94>)
 800037e:	4a18      	ldr	r2, [pc, #96]	; (80003e0 <SetSysClock+0x9c>)
 8000380:	605a      	str	r2, [r3, #4]
                 (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

  /* Enable the main PLL */
  RCC->CR |= RCC_CR_PLLON;
 8000382:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <SetSysClock+0x94>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a14      	ldr	r2, [pc, #80]	; (80003d8 <SetSysClock+0x94>)
 8000388:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800038c:	6013      	str	r3, [r2, #0]

  /* Wait till the main PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800038e:	bf00      	nop
 8000390:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <SetSysClock+0x94>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000398:	2b00      	cmp	r3, #0
 800039a:	d0f9      	beq.n	8000390 <SetSysClock+0x4c>
  {
  }
   
  /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
  FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SetSysClock+0xa0>)
 800039e:	f240 6202 	movw	r2, #1538	; 0x602
 80003a2:	601a      	str	r2, [r3, #0]

  /* Select the main PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <SetSysClock+0x94>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	4a0b      	ldr	r2, [pc, #44]	; (80003d8 <SetSysClock+0x94>)
 80003aa:	f023 0303 	bic.w	r3, r3, #3
 80003ae:	6093      	str	r3, [r2, #8]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 80003b0:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <SetSysClock+0x94>)
 80003b2:	689b      	ldr	r3, [r3, #8]
 80003b4:	4a08      	ldr	r2, [pc, #32]	; (80003d8 <SetSysClock+0x94>)
 80003b6:	f043 0302 	orr.w	r3, r3, #2
 80003ba:	6093      	str	r3, [r2, #8]

  /* Wait till the main PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80003bc:	bf00      	nop
 80003be:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <SetSysClock+0x94>)
 80003c0:	689b      	ldr	r3, [r3, #8]
 80003c2:	f003 030c 	and.w	r3, r3, #12
 80003c6:	2b08      	cmp	r3, #8
 80003c8:	d1f9      	bne.n	80003be <SetSysClock+0x7a>
}
 80003ca:	bf00      	nop
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40023800 	.word	0x40023800
 80003dc:	40007000 	.word	0x40007000
 80003e0:	08015410 	.word	0x08015410
 80003e4:	40023c00 	.word	0x40023c00

080003e8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80003f0:	2300      	movs	r3, #0
 80003f2:	73fb      	strb	r3, [r7, #15]
 80003f4:	2300      	movs	r3, #0
 80003f6:	73bb      	strb	r3, [r7, #14]
 80003f8:	230f      	movs	r3, #15
 80003fa:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	78db      	ldrb	r3, [r3, #3]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d039      	beq.n	8000478 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000404:	4b27      	ldr	r3, [pc, #156]	; (80004a4 <NVIC_Init+0xbc>)
 8000406:	68db      	ldr	r3, [r3, #12]
 8000408:	43db      	mvns	r3, r3
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	b2db      	uxtb	r3, r3
 800040e:	f003 0307 	and.w	r3, r3, #7
 8000412:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000414:	7bfb      	ldrb	r3, [r7, #15]
 8000416:	f1c3 0304 	rsb	r3, r3, #4
 800041a:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 800041c:	7b7a      	ldrb	r2, [r7, #13]
 800041e:	7bfb      	ldrb	r3, [r7, #15]
 8000420:	fa42 f303 	asr.w	r3, r2, r3
 8000424:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	785b      	ldrb	r3, [r3, #1]
 800042a:	461a      	mov	r2, r3
 800042c:	7bbb      	ldrb	r3, [r7, #14]
 800042e:	fa02 f303 	lsl.w	r3, r2, r3
 8000432:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	789a      	ldrb	r2, [r3, #2]
 8000438:	7b7b      	ldrb	r3, [r7, #13]
 800043a:	4013      	ands	r3, r2
 800043c:	b2da      	uxtb	r2, r3
 800043e:	7bfb      	ldrb	r3, [r7, #15]
 8000440:	4313      	orrs	r3, r2
 8000442:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000444:	7bfb      	ldrb	r3, [r7, #15]
 8000446:	011b      	lsls	r3, r3, #4
 8000448:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800044a:	4a17      	ldr	r2, [pc, #92]	; (80004a8 <NVIC_Init+0xc0>)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	4413      	add	r3, r2
 8000452:	7bfa      	ldrb	r2, [r7, #15]
 8000454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000460:	4911      	ldr	r1, [pc, #68]	; (80004a8 <NVIC_Init+0xc0>)
 8000462:	687a      	ldr	r2, [r7, #4]
 8000464:	7812      	ldrb	r2, [r2, #0]
 8000466:	0952      	lsrs	r2, r2, #5
 8000468:	b2d2      	uxtb	r2, r2
 800046a:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800046c:	2201      	movs	r2, #1
 800046e:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000472:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000476:	e00f      	b.n	8000498 <NVIC_Init+0xb0>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000480:	4909      	ldr	r1, [pc, #36]	; (80004a8 <NVIC_Init+0xc0>)
 8000482:	687a      	ldr	r2, [r7, #4]
 8000484:	7812      	ldrb	r2, [r2, #0]
 8000486:	0952      	lsrs	r2, r2, #5
 8000488:	b2d2      	uxtb	r2, r2
 800048a:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800048c:	2201      	movs	r2, #1
 800048e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000490:	f100 0320 	add.w	r3, r0, #32
 8000494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	e000ed00 	.word	0xe000ed00
 80004a8:	e000e100 	.word	0xe000e100

080004ac <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80004b8:	4b34      	ldr	r3, [pc, #208]	; (800058c <EXTI_Init+0xe0>)
 80004ba:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	799b      	ldrb	r3, [r3, #6]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d04f      	beq.n	8000564 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80004c4:	4b31      	ldr	r3, [pc, #196]	; (800058c <EXTI_Init+0xe0>)
 80004c6:	681a      	ldr	r2, [r3, #0]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	43db      	mvns	r3, r3
 80004ce:	492f      	ldr	r1, [pc, #188]	; (800058c <EXTI_Init+0xe0>)
 80004d0:	4013      	ands	r3, r2
 80004d2:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80004d4:	4b2d      	ldr	r3, [pc, #180]	; (800058c <EXTI_Init+0xe0>)
 80004d6:	685a      	ldr	r2, [r3, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	43db      	mvns	r3, r3
 80004de:	492b      	ldr	r1, [pc, #172]	; (800058c <EXTI_Init+0xe0>)
 80004e0:	4013      	ands	r3, r2
 80004e2:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	791b      	ldrb	r3, [r3, #4]
 80004e8:	461a      	mov	r2, r3
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	4413      	add	r3, r2
 80004ee:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	6819      	ldr	r1, [r3, #0]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681a      	ldr	r2, [r3, #0]
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	430a      	orrs	r2, r1
 80004fc:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80004fe:	4b23      	ldr	r3, [pc, #140]	; (800058c <EXTI_Init+0xe0>)
 8000500:	689a      	ldr	r2, [r3, #8]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	43db      	mvns	r3, r3
 8000508:	4920      	ldr	r1, [pc, #128]	; (800058c <EXTI_Init+0xe0>)
 800050a:	4013      	ands	r3, r2
 800050c:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800050e:	4b1f      	ldr	r3, [pc, #124]	; (800058c <EXTI_Init+0xe0>)
 8000510:	68da      	ldr	r2, [r3, #12]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	43db      	mvns	r3, r3
 8000518:	491c      	ldr	r1, [pc, #112]	; (800058c <EXTI_Init+0xe0>)
 800051a:	4013      	ands	r3, r2
 800051c:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	795b      	ldrb	r3, [r3, #5]
 8000522:	2b10      	cmp	r3, #16
 8000524:	d10e      	bne.n	8000544 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000526:	4b19      	ldr	r3, [pc, #100]	; (800058c <EXTI_Init+0xe0>)
 8000528:	689a      	ldr	r2, [r3, #8]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4917      	ldr	r1, [pc, #92]	; (800058c <EXTI_Init+0xe0>)
 8000530:	4313      	orrs	r3, r2
 8000532:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000534:	4b15      	ldr	r3, [pc, #84]	; (800058c <EXTI_Init+0xe0>)
 8000536:	68da      	ldr	r2, [r3, #12]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4913      	ldr	r1, [pc, #76]	; (800058c <EXTI_Init+0xe0>)
 800053e:	4313      	orrs	r3, r2
 8000540:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000542:	e01d      	b.n	8000580 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8000544:	4b11      	ldr	r3, [pc, #68]	; (800058c <EXTI_Init+0xe0>)
 8000546:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	795b      	ldrb	r3, [r3, #5]
 800054c:	461a      	mov	r2, r3
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	4413      	add	r3, r2
 8000552:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	6819      	ldr	r1, [r3, #0]
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	430a      	orrs	r2, r1
 8000560:	601a      	str	r2, [r3, #0]
}
 8000562:	e00d      	b.n	8000580 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	791b      	ldrb	r3, [r3, #4]
 8000568:	461a      	mov	r2, r3
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	4413      	add	r3, r2
 800056e:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	6819      	ldr	r1, [r3, #0]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	43da      	mvns	r2, r3
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	400a      	ands	r2, r1
 800057e:	601a      	str	r2, [r3, #0]
}
 8000580:	bf00      	nop
 8000582:	3714      	adds	r7, #20
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	40013c00 	.word	0x40013c00

08000590 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000598:	2300      	movs	r3, #0
 800059a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <EXTI_GetFlagStatus+0x30>)
 800059e:	695a      	ldr	r2, [r3, #20]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4013      	ands	r3, r2
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d002      	beq.n	80005ae <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 80005a8:	2301      	movs	r3, #1
 80005aa:	73fb      	strb	r3, [r7, #15]
 80005ac:	e001      	b.n	80005b2 <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 80005ae:	2300      	movs	r3, #0
 80005b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3714      	adds	r7, #20
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	40013c00 	.word	0x40013c00

080005c4 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <EXTI_ClearITPendingBit+0x1c>)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	6153      	str	r3, [r2, #20]
}
 80005d2:	bf00      	nop
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	40013c00 	.word	0x40013c00

080005e4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b087      	sub	sp, #28
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	e076      	b.n	80006ee <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000600:	2201      	movs	r2, #1
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	fa02 f303 	lsl.w	r3, r2, r3
 8000608:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	693a      	ldr	r2, [r7, #16]
 8000610:	4013      	ands	r3, r2
 8000612:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000614:	68fa      	ldr	r2, [r7, #12]
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	429a      	cmp	r2, r3
 800061a:	d165      	bne.n	80006e8 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	2103      	movs	r1, #3
 8000626:	fa01 f303 	lsl.w	r3, r1, r3
 800062a:	43db      	mvns	r3, r3
 800062c:	401a      	ands	r2, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	791b      	ldrb	r3, [r3, #4]
 800063a:	4619      	mov	r1, r3
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	fa01 f303 	lsl.w	r3, r1, r3
 8000644:	431a      	orrs	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	791b      	ldrb	r3, [r3, #4]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d003      	beq.n	800065a <GPIO_Init+0x76>
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	791b      	ldrb	r3, [r3, #4]
 8000656:	2b02      	cmp	r3, #2
 8000658:	d12e      	bne.n	80006b8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	689a      	ldr	r2, [r3, #8]
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	2103      	movs	r1, #3
 8000664:	fa01 f303 	lsl.w	r3, r1, r3
 8000668:	43db      	mvns	r3, r3
 800066a:	401a      	ands	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	689a      	ldr	r2, [r3, #8]
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	795b      	ldrb	r3, [r3, #5]
 8000678:	4619      	mov	r1, r3
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	fa01 f303 	lsl.w	r3, r1, r3
 8000682:	431a      	orrs	r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	685a      	ldr	r2, [r3, #4]
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	b29b      	uxth	r3, r3
 8000690:	4619      	mov	r1, r3
 8000692:	2301      	movs	r3, #1
 8000694:	408b      	lsls	r3, r1
 8000696:	43db      	mvns	r3, r3
 8000698:	401a      	ands	r2, r3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	683a      	ldr	r2, [r7, #0]
 80006a4:	7992      	ldrb	r2, [r2, #6]
 80006a6:	4611      	mov	r1, r2
 80006a8:	697a      	ldr	r2, [r7, #20]
 80006aa:	b292      	uxth	r2, r2
 80006ac:	fa01 f202 	lsl.w	r2, r1, r2
 80006b0:	b292      	uxth	r2, r2
 80006b2:	431a      	orrs	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	68da      	ldr	r2, [r3, #12]
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	b29b      	uxth	r3, r3
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	2103      	movs	r1, #3
 80006c4:	fa01 f303 	lsl.w	r3, r1, r3
 80006c8:	43db      	mvns	r3, r3
 80006ca:	401a      	ands	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	68da      	ldr	r2, [r3, #12]
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	79db      	ldrb	r3, [r3, #7]
 80006d8:	4619      	mov	r1, r3
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	fa01 f303 	lsl.w	r3, r1, r3
 80006e2:	431a      	orrs	r2, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	3301      	adds	r3, #1
 80006ec:	617b      	str	r3, [r7, #20]
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	2b0f      	cmp	r3, #15
 80006f2:	d985      	bls.n	8000600 <GPIO_Init+0x1c>
    }
  }
}
 80006f4:	bf00      	nop
 80006f6:	bf00      	nop
 80006f8:	371c      	adds	r7, #28
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr

08000702 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000702:	b480      	push	{r7}
 8000704:	b085      	sub	sp, #20
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
 800070a:	460b      	mov	r3, r1
 800070c:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800070e:	2300      	movs	r3, #0
 8000710:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	691a      	ldr	r2, [r3, #16]
 8000716:	887b      	ldrh	r3, [r7, #2]
 8000718:	4013      	ands	r3, r2
 800071a:	2b00      	cmp	r3, #0
 800071c:	d002      	beq.n	8000724 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800071e:	2301      	movs	r3, #1
 8000720:	73fb      	strb	r3, [r7, #15]
 8000722:	e001      	b.n	8000728 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000724:	2300      	movs	r3, #0
 8000726:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000728:	7bfb      	ldrb	r3, [r7, #15]
}
 800072a:	4618      	mov	r0, r3
 800072c:	3714      	adds	r7, #20
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000736:	b480      	push	{r7}
 8000738:	b083      	sub	sp, #12
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
 800073e:	460b      	mov	r3, r1
 8000740:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	887a      	ldrh	r2, [r7, #2]
 8000746:	831a      	strh	r2, [r3, #24]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	887a      	ldrh	r2, [r7, #2]
 8000764:	835a      	strh	r2, [r3, #26]
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000774:	b480      	push	{r7}
 8000776:	b089      	sub	sp, #36	; 0x24
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800077c:	2300      	movs	r3, #0
 800077e:	61bb      	str	r3, [r7, #24]
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]
 8000788:	2302      	movs	r3, #2
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	2302      	movs	r3, #2
 8000792:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000794:	4b4a      	ldr	r3, [pc, #296]	; (80008c0 <RCC_GetClocksFreq+0x14c>)
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	f003 030c 	and.w	r3, r3, #12
 800079c:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800079e:	69bb      	ldr	r3, [r7, #24]
 80007a0:	2b08      	cmp	r3, #8
 80007a2:	d011      	beq.n	80007c8 <RCC_GetClocksFreq+0x54>
 80007a4:	69bb      	ldr	r3, [r7, #24]
 80007a6:	2b08      	cmp	r3, #8
 80007a8:	d844      	bhi.n	8000834 <RCC_GetClocksFreq+0xc0>
 80007aa:	69bb      	ldr	r3, [r7, #24]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d003      	beq.n	80007b8 <RCC_GetClocksFreq+0x44>
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	2b04      	cmp	r3, #4
 80007b4:	d004      	beq.n	80007c0 <RCC_GetClocksFreq+0x4c>
 80007b6:	e03d      	b.n	8000834 <RCC_GetClocksFreq+0xc0>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4a42      	ldr	r2, [pc, #264]	; (80008c4 <RCC_GetClocksFreq+0x150>)
 80007bc:	601a      	str	r2, [r3, #0]
    break;
 80007be:	e03d      	b.n	800083c <RCC_GetClocksFreq+0xc8>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	4a41      	ldr	r2, [pc, #260]	; (80008c8 <RCC_GetClocksFreq+0x154>)
 80007c4:	601a      	str	r2, [r3, #0]
    break;
 80007c6:	e039      	b.n	800083c <RCC_GetClocksFreq+0xc8>
  case 0x08:  /* PLL P used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80007c8:	4b3d      	ldr	r3, [pc, #244]	; (80008c0 <RCC_GetClocksFreq+0x14c>)
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	0d9b      	lsrs	r3, r3, #22
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80007d4:	4b3a      	ldr	r3, [pc, #232]	; (80008c0 <RCC_GetClocksFreq+0x14c>)
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80007dc:	60bb      	str	r3, [r7, #8]

    if (pllsource != 0)
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d00c      	beq.n	80007fe <RCC_GetClocksFreq+0x8a>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80007e4:	4a38      	ldr	r2, [pc, #224]	; (80008c8 <RCC_GetClocksFreq+0x154>)
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ec:	4a34      	ldr	r2, [pc, #208]	; (80008c0 <RCC_GetClocksFreq+0x14c>)
 80007ee:	6852      	ldr	r2, [r2, #4]
 80007f0:	0992      	lsrs	r2, r2, #6
 80007f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80007f6:	fb02 f303 	mul.w	r3, r2, r3
 80007fa:	61fb      	str	r3, [r7, #28]
 80007fc:	e00b      	b.n	8000816 <RCC_GetClocksFreq+0xa2>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80007fe:	4a31      	ldr	r2, [pc, #196]	; (80008c4 <RCC_GetClocksFreq+0x150>)
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	fbb2 f3f3 	udiv	r3, r2, r3
 8000806:	4a2e      	ldr	r2, [pc, #184]	; (80008c0 <RCC_GetClocksFreq+0x14c>)
 8000808:	6852      	ldr	r2, [r2, #4]
 800080a:	0992      	lsrs	r2, r2, #6
 800080c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000810:	fb02 f303 	mul.w	r3, r2, r3
 8000814:	61fb      	str	r3, [r7, #28]
    }

    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000816:	4b2a      	ldr	r3, [pc, #168]	; (80008c0 <RCC_GetClocksFreq+0x14c>)
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	0c1b      	lsrs	r3, r3, #16
 800081c:	f003 0303 	and.w	r3, r3, #3
 8000820:	3301      	adds	r3, #1
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000826:	69fa      	ldr	r2, [r7, #28]
 8000828:	693b      	ldr	r3, [r7, #16]
 800082a:	fbb2 f2f3 	udiv	r2, r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	601a      	str	r2, [r3, #0]
    break;
 8000832:	e003      	b.n	800083c <RCC_GetClocksFreq+0xc8>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */

  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4a23      	ldr	r2, [pc, #140]	; (80008c4 <RCC_GetClocksFreq+0x150>)
 8000838:	601a      	str	r2, [r3, #0]
    break;
 800083a:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800083c:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <RCC_GetClocksFreq+0x14c>)
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000844:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000846:	69bb      	ldr	r3, [r7, #24]
 8000848:	091b      	lsrs	r3, r3, #4
 800084a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800084c:	4a1f      	ldr	r2, [pc, #124]	; (80008cc <RCC_GetClocksFreq+0x158>)
 800084e:	69bb      	ldr	r3, [r7, #24]
 8000850:	4413      	add	r3, r2
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	40da      	lsrs	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000864:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <RCC_GetClocksFreq+0x14c>)
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800086c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800086e:	69bb      	ldr	r3, [r7, #24]
 8000870:	0a9b      	lsrs	r3, r3, #10
 8000872:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000874:	4a15      	ldr	r2, [pc, #84]	; (80008cc <RCC_GetClocksFreq+0x158>)
 8000876:	69bb      	ldr	r3, [r7, #24]
 8000878:	4413      	add	r3, r2
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	b2db      	uxtb	r3, r3
 800087e:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	685a      	ldr	r2, [r3, #4]
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	40da      	lsrs	r2, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <RCC_GetClocksFreq+0x14c>)
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000894:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000896:	69bb      	ldr	r3, [r7, #24]
 8000898:	0b5b      	lsrs	r3, r3, #13
 800089a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800089c:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <RCC_GetClocksFreq+0x158>)
 800089e:	69bb      	ldr	r3, [r7, #24]
 80008a0:	4413      	add	r3, r2
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	685a      	ldr	r2, [r3, #4]
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	40da      	lsrs	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	60da      	str	r2, [r3, #12]
}
 80008b4:	bf00      	nop
 80008b6:	3724      	adds	r7, #36	; 0x24
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	40023800 	.word	0x40023800
 80008c4:	00f42400 	.word	0x00f42400
 80008c8:	017d7840 	.word	0x017d7840
 80008cc:	20000014 	.word	0x20000014

080008d0 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	460b      	mov	r3, r1
 80008da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008dc:	78fb      	ldrb	r3, [r7, #3]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d006      	beq.n	80008f0 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80008e2:	4b0a      	ldr	r3, [pc, #40]	; (800090c <RCC_AHB1PeriphClockCmd+0x3c>)
 80008e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008e6:	4909      	ldr	r1, [pc, #36]	; (800090c <RCC_AHB1PeriphClockCmd+0x3c>)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4313      	orrs	r3, r2
 80008ec:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80008ee:	e006      	b.n	80008fe <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <RCC_AHB1PeriphClockCmd+0x3c>)
 80008f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	43db      	mvns	r3, r3
 80008f8:	4904      	ldr	r1, [pc, #16]	; (800090c <RCC_AHB1PeriphClockCmd+0x3c>)
 80008fa:	4013      	ands	r3, r2
 80008fc:	630b      	str	r3, [r1, #48]	; 0x30
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800

08000910 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	460b      	mov	r3, r1
 800091a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800091c:	78fb      	ldrb	r3, [r7, #3]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d006      	beq.n	8000930 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000922:	4b0a      	ldr	r3, [pc, #40]	; (800094c <RCC_APB2PeriphClockCmd+0x3c>)
 8000924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000926:	4909      	ldr	r1, [pc, #36]	; (800094c <RCC_APB2PeriphClockCmd+0x3c>)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4313      	orrs	r3, r2
 800092c:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800092e:	e006      	b.n	800093e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <RCC_APB2PeriphClockCmd+0x3c>)
 8000932:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	43db      	mvns	r3, r3
 8000938:	4904      	ldr	r1, [pc, #16]	; (800094c <RCC_APB2PeriphClockCmd+0x3c>)
 800093a:	4013      	ands	r3, r2
 800093c:	644b      	str	r3, [r1, #68]	; 0x44
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800

08000950 <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	460a      	mov	r2, r1
 800095a:	71fb      	strb	r3, [r7, #7]
 800095c:	4613      	mov	r3, r2
 800095e:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000964:	79bb      	ldrb	r3, [r7, #6]
 8000966:	f003 0303 	and.w	r3, r3, #3
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	220f      	movs	r2, #15
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000974:	4a16      	ldr	r2, [pc, #88]	; (80009d0 <SYSCFG_EXTILineConfig+0x80>)
 8000976:	79bb      	ldrb	r3, [r7, #6]
 8000978:	089b      	lsrs	r3, r3, #2
 800097a:	b2db      	uxtb	r3, r3
 800097c:	3302      	adds	r3, #2
 800097e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	43db      	mvns	r3, r3
 8000986:	4812      	ldr	r0, [pc, #72]	; (80009d0 <SYSCFG_EXTILineConfig+0x80>)
 8000988:	79b9      	ldrb	r1, [r7, #6]
 800098a:	0889      	lsrs	r1, r1, #2
 800098c:	b2c9      	uxtb	r1, r1
 800098e:	401a      	ands	r2, r3
 8000990:	1c8b      	adds	r3, r1, #2
 8000992:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000996:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <SYSCFG_EXTILineConfig+0x80>)
 8000998:	79bb      	ldrb	r3, [r7, #6]
 800099a:	089b      	lsrs	r3, r3, #2
 800099c:	b2db      	uxtb	r3, r3
 800099e:	3302      	adds	r3, #2
 80009a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009a4:	79f9      	ldrb	r1, [r7, #7]
 80009a6:	79bb      	ldrb	r3, [r7, #6]
 80009a8:	f003 0303 	and.w	r3, r3, #3
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	fa01 f303 	lsl.w	r3, r1, r3
 80009b2:	4807      	ldr	r0, [pc, #28]	; (80009d0 <SYSCFG_EXTILineConfig+0x80>)
 80009b4:	79b9      	ldrb	r1, [r7, #6]
 80009b6:	0889      	lsrs	r1, r1, #2
 80009b8:	b2c9      	uxtb	r1, r1
 80009ba:	431a      	orrs	r2, r3
 80009bc:	1c8b      	adds	r3, r1, #2
 80009be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80009c2:	bf00      	nop
 80009c4:	3714      	adds	r7, #20
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40013800 	.word	0x40013800

080009d4 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	889b      	ldrh	r3, [r3, #4]
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009e6:	b29b      	uxth	r3, r3
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b087      	sub	sp, #28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	460b      	mov	r3, r1
 80009fe:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000a10:	887b      	ldrh	r3, [r7, #2]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	095b      	lsrs	r3, r3, #5
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000a1a:	887b      	ldrh	r3, [r7, #2]
 8000a1c:	f003 031f 	and.w	r3, r3, #31
 8000a20:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000a22:	2201      	movs	r2, #1
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d107      	bne.n	8000a42 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	899b      	ldrh	r3, [r3, #12]
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	461a      	mov	r2, r3
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	e011      	b.n	8000a66 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	d107      	bne.n	8000a58 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	8a1b      	ldrh	r3, [r3, #16]
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	461a      	mov	r2, r3
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	4013      	ands	r3, r2
 8000a54:	617b      	str	r3, [r7, #20]
 8000a56:	e006      	b.n	8000a66 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	8a9b      	ldrh	r3, [r3, #20]
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	461a      	mov	r2, r3
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	4013      	ands	r3, r2
 8000a64:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000a66:	887b      	ldrh	r3, [r7, #2]
 8000a68:	0a1b      	lsrs	r3, r3, #8
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000a6e:	2201      	movs	r2, #1
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	461a      	mov	r2, r3
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	4013      	ands	r3, r2
 8000a84:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d005      	beq.n	8000a98 <USART_GetITStatus+0xa4>
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d002      	beq.n	8000a98 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000a92:	2301      	movs	r3, #1
 8000a94:	74fb      	strb	r3, [r7, #19]
 8000a96:	e001      	b.n	8000a9c <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000a9c:	7cfb      	ldrb	r3, [r7, #19]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	371c      	adds	r7, #28
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b085      	sub	sp, #20
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	81fb      	strh	r3, [r7, #14]
 8000aba:	2300      	movs	r3, #0
 8000abc:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8000abe:	887b      	ldrh	r3, [r7, #2]
 8000ac0:	0a1b      	lsrs	r3, r3, #8
 8000ac2:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8000ac4:	89fb      	ldrh	r3, [r7, #14]
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8000acc:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8000ace:	89bb      	ldrh	r3, [r7, #12]
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	801a      	strh	r2, [r3, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	6039      	str	r1, [r7, #0]
 8000aee:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	da0b      	bge.n	8000b10 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	490c      	ldr	r1, [pc, #48]	; (8000b30 <NVIC_SetPriority+0x4c>)
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	f003 030f 	and.w	r3, r3, #15
 8000b04:	3b04      	subs	r3, #4
 8000b06:	0112      	lsls	r2, r2, #4
 8000b08:	b2d2      	uxtb	r2, r2
 8000b0a:	440b      	add	r3, r1
 8000b0c:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b0e:	e009      	b.n	8000b24 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	4907      	ldr	r1, [pc, #28]	; (8000b34 <NVIC_SetPriority+0x50>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	0112      	lsls	r2, r2, #4
 8000b1c:	b2d2      	uxtb	r2, r2
 8000b1e:	440b      	add	r3, r1
 8000b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000ed00 	.word	0xe000ed00
 8000b34:	e000e100 	.word	0xe000e100

08000b38 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b48:	d301      	bcc.n	8000b4e <SysTick_Config+0x16>
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e00f      	b.n	8000b6e <SysTick_Config+0x36>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <SysTick_Config+0x40>)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b56:	210f      	movs	r1, #15
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	f7ff ffc2 	bl	8000ae4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <SysTick_Config+0x40>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b66:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <SysTick_Config+0x40>)
 8000b68:	2207      	movs	r2, #7
 8000b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	e000e010 	.word	0xe000e010

08000b7c <TimerInit>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
TimerInit(void) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef RCC_Clocks;

    RCC_GetClocksFreq(&RCC_Clocks);
 8000b82:	463b      	mov	r3, r7
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fdf5 	bl	8000774 <RCC_GetClocksFreq>
    SysTick_Config(RCC_Clocks.SYSCLK_Frequency/1000);
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <TimerInit+0x3c>)
 8000b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b92:	099b      	lsrs	r3, r3, #6
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ffcf 	bl	8000b38 <SysTick_Config>
    NVIC_SetPriority(SysTick_IRQn, 1);
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	f7ff ffa0 	bl	8000ae4 <NVIC_SetPriority>
    memsetl((uint8_t *)g_pTimerHandle, 0, sizeof(g_pTimerHandle));
 8000ba4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4804      	ldr	r0, [pc, #16]	; (8000bbc <TimerInit+0x40>)
 8000bac:	f000 f8af 	bl	8000d0e <memsetl>
    DBG_TIMER_SEND_STR("$ TimerInit\n");
}
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	10624dd3 	.word	0x10624dd3
 8000bbc:	20000040 	.word	0x20000040

08000bc0 <GetMilSecTick>:
 * @brief  None
 * @param  None
 * @retval None
 */
uint32_t
GetMilSecTick(void) {
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
    return g_wMilSecTickTimer;
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <GetMilSecTick+0x14>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	200001c0 	.word	0x200001c0

08000bd8 <SysTick_Handler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
SysTick_Handler(void) {
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <SysTick_Handler+0x18>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	3301      	adds	r3, #1
 8000be2:	4a03      	ldr	r2, [pc, #12]	; (8000bf0 <SysTick_Handler+0x18>)
 8000be4:	6013      	str	r3, [r2, #0]
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	200001c0 	.word	0x200001c0

08000bf4 <USART2_IRQHandler>:
 *   This parameter can be one of the following values:
 *   UART1_IDX, UART2_IDX
 * @retval None
 */
void
USART2_IRQHandler(void) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfa:	b672      	cpsid	i
}
 8000bfc:	bf00      	nop
	__disable_irq();
    if (USART_GetITStatus(USART2, USART_IT_RXNE) == SET) {
 8000bfe:	f240 5125 	movw	r1, #1317	; 0x525
 8000c02:	480f      	ldr	r0, [pc, #60]	; (8000c40 <USART2_IRQHandler+0x4c>)
 8000c04:	f7ff fef6 	bl	80009f4 <USART_GetITStatus>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d112      	bne.n	8000c34 <USART2_IRQHandler+0x40>
        buffqueue_p pUartBuffQueueRx = (buffqueue_p) g_pUartQueueRx[0];
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <USART2_IRQHandler+0x50>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	607b      	str	r3, [r7, #4]
        uint8_t byReceiverData = USART_ReceiveData(USART2);
 8000c14:	480a      	ldr	r0, [pc, #40]	; (8000c40 <USART2_IRQHandler+0x4c>)
 8000c16:	f7ff fedd 	bl	80009d4 <USART_ReceiveData>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	70fb      	strb	r3, [r7, #3]
        if (bufEnDat(pUartBuffQueueRx, &byReceiverData) == ERR_BUF_FULL) {}
 8000c20:	1cfb      	adds	r3, r7, #3
 8000c22:	4619      	mov	r1, r3
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f000 f822 	bl	8000c6e <bufEnDat>
        USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8000c2a:	f240 5125 	movw	r1, #1317	; 0x525
 8000c2e:	4804      	ldr	r0, [pc, #16]	; (8000c40 <USART2_IRQHandler+0x4c>)
 8000c30:	f7ff ff3b 	bl	8000aaa <USART_ClearITPendingBit>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c34:	b662      	cpsie	i
}
 8000c36:	bf00      	nop
    }
    __enable_irq();
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40004400 	.word	0x40004400
 8000c44:	200001c4 	.word	0x200001c4

08000c48 <bufIsFull>:
 * @return 1 if full; 0 otherwise
 */
uint8_t
bufIsFull(
    buffqueue_p pQueue
) {
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
    return (pQueue->wCountEle >= pQueue->wSize);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	885a      	ldrh	r2, [r3, #2]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	bf2c      	ite	cs
 8000c5c:	2301      	movcs	r3, #1
 8000c5e:	2300      	movcc	r3, #0
 8000c60:	b2db      	uxtb	r3, r3
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <bufEnDat>:
 */
uint8_t
bufEnDat(
    buffqueue_p pQueue,
	uint8_t *pReceiverData
) {
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b084      	sub	sp, #16
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
 8000c76:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000c78:	b672      	cpsid	i
}
 8000c7a:	bf00      	nop
	__disable_irq();
    
    /* Place data in buffer */
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	73fb      	strb	r3, [r7, #15]
 8000c80:	e021      	b.n	8000cc6 <bufEnDat+0x58>
        pQueue->pData[pQueue->wHeadIndex] = pReceiverData[i];
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	683a      	ldr	r2, [r7, #0]
 8000c86:	441a      	add	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	6879      	ldr	r1, [r7, #4]
 8000c8e:	88c9      	ldrh	r1, [r1, #6]
 8000c90:	440b      	add	r3, r1
 8000c92:	7812      	ldrb	r2, [r2, #0]
 8000c94:	701a      	strb	r2, [r3, #0]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1)  & (pQueue->wSize - 1));
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	88db      	ldrh	r3, [r3, #6]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	b21a      	sxth	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	b21b      	sxth	r3, r3
 8000caa:	4013      	ands	r3, r2
 8000cac:	b21b      	sxth	r3, r3
 8000cae:	b29a      	uxth	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	80da      	strh	r2, [r3, #6]
        pQueue->wCountEle++;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	885b      	ldrh	r3, [r3, #2]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	73fb      	strb	r3, [r7, #15]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	791b      	ldrb	r3, [r3, #4]
 8000cca:	7bfa      	ldrb	r2, [r7, #15]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d3d8      	bcc.n	8000c82 <bufEnDat+0x14>
    }
    
    if (bufIsFull(pQueue)) {
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff ffb9 	bl	8000c48 <bufIsFull>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d011      	beq.n	8000d00 <bufEnDat+0x92>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wTailIndex = (pQueue->wTailIndex + pQueue->byItemSize) & (pQueue->wSize - 1);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	891a      	ldrh	r2, [r3, #8]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	791b      	ldrb	r3, [r3, #4]
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	4413      	add	r3, r2
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	b21a      	sxth	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	b21b      	sxth	r3, r3
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	b21b      	sxth	r3, r3
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	811a      	strh	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8000d00:	b662      	cpsie	i
}
 8000d02:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <memsetl>:
void
memsetl(
	uint8_t *dst,
	uint8_t value,
	uint16_t size
) {
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
 8000d16:	460b      	mov	r3, r1
 8000d18:	70fb      	strb	r3, [r7, #3]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	803b      	strh	r3, [r7, #0]
    while (size--) {
 8000d1e:	e004      	b.n	8000d2a <memsetl+0x1c>
        *dst++ = value;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	1c5a      	adds	r2, r3, #1
 8000d24:	607a      	str	r2, [r7, #4]
 8000d26:	78fa      	ldrb	r2, [r7, #3]
 8000d28:	701a      	strb	r2, [r3, #0]
    while (size--) {
 8000d2a:	883b      	ldrh	r3, [r7, #0]
 8000d2c:	1e5a      	subs	r2, r3, #1
 8000d2e:	803a      	strh	r2, [r7, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d1f5      	bne.n	8000d20 <memsetl+0x12>
    }    
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
	...

08000d44 <main>:
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/

/******************************************************************************/

int main(void_t) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af02      	add	r7, sp, #8
	buttonB2.Count = 0;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <main+0x40>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
	SystemCoreClockUpdate();
 8000d50:	f7ff fa76 	bl	8000240 <SystemCoreClockUpdate>
	ledBuzzer_Init();
 8000d54:	f000 f832 	bl	8000dbc <ledBuzzer_Init>
	TimerInit();
 8000d58:	f7ff ff10 	bl	8000b7c <TimerInit>
	interruptPA4_Init();
 8000d5c:	f000 f860 	bl	8000e20 <interruptPA4_Init>
	interruptPB3_Init();
 8000d60:	f000 f8da 	bl	8000f18 <interruptPB3_Init>
	interruptPA0_Init();
 8000d64:	f000 f89a 	bl	8000e9c <interruptPA0_Init>
	blinkLedStatusPower(LEDGREEN1_GPIO_PORT, LEDGREEN1_GPIO_PIN,
 8000d68:	2304      	movs	r3, #4
 8000d6a:	9300      	str	r3, [sp, #0]
 8000d6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d70:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <main+0x44>)
 8000d72:	2101      	movs	r1, #1
 8000d74:	4804      	ldr	r0, [pc, #16]	; (8000d88 <main+0x44>)
 8000d76:	f000 fa23 	bl	80011c0 <blinkLedStatusPower>
						LEDGREEN2_GPIO_PORT, LEDGREEN2_GPIO_PIN, 4);
	while (1) {
		toggleLed_5Times();
 8000d7a:	f000 f9e7 	bl	800114c <toggleLed_5Times>
		LedControl_TimPressRealease();
 8000d7e:	f000 fa57 	bl	8001230 <LedControl_TimPressRealease>
		toggleLed_5Times();
 8000d82:	e7fa      	b.n	8000d7a <main+0x36>
 8000d84:	200001e4 	.word	0x200001e4
 8000d88:	40020000 	.word	0x40020000

08000d8c <delay_ms>:
 * @func   delay_ms
 * @brief  delay millisecond
 * @param  milisecond
 * @retval None
 */
static void_t delay_ms(u32_t dwMillisecond) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

	u32_t dwStartTime = GetMilSecTick(); //Lưu lại thời điểm hiện tại.
 8000d94:	f7ff ff14 	bl	8000bc0 <GetMilSecTick>
 8000d98:	60f8      	str	r0, [r7, #12]
	while (calculatorTime(dwStartTime, GetMilSecTick()) <= dwMillisecond);
 8000d9a:	bf00      	nop
 8000d9c:	f7ff ff10 	bl	8000bc0 <GetMilSecTick>
 8000da0:	4603      	mov	r3, r0
 8000da2:	4619      	mov	r1, r3
 8000da4:	68f8      	ldr	r0, [r7, #12]
 8000da6:	f000 f9b7 	bl	8001118 <calculatorTime>
 8000daa:	4602      	mov	r2, r0
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d2f4      	bcs.n	8000d9c <delay_ms+0x10>

//	Đợi cho đến khi hết khoảng time cài đặt

}
 8000db2:	bf00      	nop
 8000db4:	bf00      	nop
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <ledBuzzer_Init>:
 * @func   ledBuzzer_Init
 * @brief  Init Buuzzer and Led
 * @param  None
 * @retval None
 */
static void_t ledBuzzer_Init(void_t) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
	//Declare type variable GPIO Struct------------------------------------------------
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	2007      	movs	r0, #7
 8000dc6:	f7ff fd83 	bl	80008d0 <RCC_AHB1PeriphClockCmd>
			RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC,
			ENABLE);

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	71fb      	strb	r3, [r7, #7]

//	Port A
	GPIO_InitStructure.GPIO_Pin = LEDGREEN1_GPIO_PIN | LEDGREEN2_GPIO_PIN
 8000dda:	f640 430b 	movw	r3, #3083	; 0xc0b
 8000dde:	603b      	str	r3, [r7, #0]
			| LEDRED1_GPIO_PIN | LEDBLUE1_GPIO_PIN | LEDBLUE2_GPIO_PIN;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000de0:	463b      	mov	r3, r7
 8000de2:	4619      	mov	r1, r3
 8000de4:	480b      	ldr	r0, [pc, #44]	; (8000e14 <ledBuzzer_Init+0x58>)
 8000de6:	f7ff fbfd 	bl	80005e4 <GPIO_Init>

//	Port B
	GPIO_InitStructure.GPIO_Pin = LEDRED2_GPIO_PIN;
 8000dea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dee:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000df0:	463b      	mov	r3, r7
 8000df2:	4619      	mov	r1, r3
 8000df4:	4808      	ldr	r0, [pc, #32]	; (8000e18 <ledBuzzer_Init+0x5c>)
 8000df6:	f7ff fbf5 	bl	80005e4 <GPIO_Init>

//  Port C
	GPIO_InitStructure.GPIO_Pin = BUZZER_GPIO_PIN;
 8000dfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dfe:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000e00:	463b      	mov	r3, r7
 8000e02:	4619      	mov	r1, r3
 8000e04:	4805      	ldr	r0, [pc, #20]	; (8000e1c <ledBuzzer_Init+0x60>)
 8000e06:	f7ff fbed 	bl	80005e4 <GPIO_Init>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40020000 	.word	0x40020000
 8000e18:	40020400 	.word	0x40020400
 8000e1c:	40020800 	.word	0x40020800

08000e20 <interruptPA4_Init>:
 * @func   interruptPA4_Init
 * @brief  Init Interrupt
 * @param  None
 * @retval None
 */
static void_t interruptPA4_Init(void_t) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;	
	EXTI_InitTypeDef EXTI_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

// Enable Clock Port A;
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000e26:	2101      	movs	r1, #1
 8000e28:	2001      	movs	r0, #1
 8000e2a:	f7ff fd51 	bl	80008d0 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Pin = BUTTONB3_GPIO_PIN;
 8000e32:	2310      	movs	r3, #16
 8000e34:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000e36:	2302      	movs	r3, #2
 8000e38:	757b      	strb	r3, [r7, #21]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	75fb      	strb	r3, [r7, #23]

	GPIO_Init(BUTTONB3_GPIO_PORT, &GPIO_InitStructure);
 8000e3e:	f107 0310 	add.w	r3, r7, #16
 8000e42:	4619      	mov	r1, r3
 8000e44:	4814      	ldr	r0, [pc, #80]	; (8000e98 <interruptPA4_Init+0x78>)
 8000e46:	f7ff fbcd 	bl	80005e4 <GPIO_Init>

//  Enable Clock Syscfg, Connect EXTI Line 4 to PA4 pin

	RCC_APB2PeriphClockCmd(SYSFG_Clock, ENABLE);
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000e50:	f7ff fd5e 	bl	8000910 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource4);
 8000e54:	2104      	movs	r1, #4
 8000e56:	2000      	movs	r0, #0
 8000e58:	f7ff fd7a 	bl	8000950 <SYSCFG_EXTILineConfig>

//	Configuration Interrupt

	EXTI_InitStructure.EXTI_Line = EXTI_Line4;
 8000e5c:	2310      	movs	r3, #16
 8000e5e:	60bb      	str	r3, [r7, #8]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000e60:	2300      	movs	r3, #0
 8000e62:	733b      	strb	r3, [r7, #12]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8000e64:	2310      	movs	r3, #16
 8000e66:	737b      	strb	r3, [r7, #13]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	73bb      	strb	r3, [r7, #14]
	EXTI_Init(&EXTI_InitStructure);
 8000e6c:	f107 0308 	add.w	r3, r7, #8
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fb1b 	bl	80004ac <EXTI_Init>

// Configuration NVIC

	NVIC_InitStructure.NVIC_IRQChannel = EXTI4_IRQn;
 8000e76:	230a      	movs	r3, #10
 8000e78:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x03;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000e82:	2301      	movs	r3, #1
 8000e84:	71fb      	strb	r3, [r7, #7]

	NVIC_Init(&NVIC_InitStructure);
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff faad 	bl	80003e8 <NVIC_Init>
}
 8000e8e:	bf00      	nop
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40020000 	.word	0x40020000

08000e9c <interruptPA0_Init>:
 * @func   interruptPA0_Init
 * @brief  Init Interrupt
 * @param  None
 * @retval None
 */
static void_t interruptPA0_Init(void_t) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	EXTI_InitTypeDef EXTI_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

// Enable Clock Port B;
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	2002      	movs	r0, #2
 8000ea6:	f7ff fd13 	bl	80008d0 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Pin = BUTTONB4_GPIO_PIN;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	757b      	strb	r3, [r7, #21]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	75fb      	strb	r3, [r7, #23]

	GPIO_Init(BUTTONB4_GPIO_PORT, &GPIO_InitStructure);
 8000eba:	f107 0310 	add.w	r3, r7, #16
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4814      	ldr	r0, [pc, #80]	; (8000f14 <interruptPA0_Init+0x78>)
 8000ec2:	f7ff fb8f 	bl	80005e4 <GPIO_Init>

//  Enable Clock Syscfg, Connect EXTI Line 0 to PB0 pin

	RCC_APB2PeriphClockCmd(SYSFG_Clock, ENABLE);
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ecc:	f7ff fd20 	bl	8000910 <RCC_APB2PeriphClockCmd>

	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource0);
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f7ff fd3c 	bl	8000950 <SYSCFG_EXTILineConfig>

//	Configuration Interrupt

	EXTI_InitStructure.EXTI_Line = EXTI_Line0;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	60bb      	str	r3, [r7, #8]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000edc:	2300      	movs	r3, #0
 8000ede:	733b      	strb	r3, [r7, #12]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8000ee0:	2310      	movs	r3, #16
 8000ee2:	737b      	strb	r3, [r7, #13]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	73bb      	strb	r3, [r7, #14]
	EXTI_Init(&EXTI_InitStructure);
 8000ee8:	f107 0308 	add.w	r3, r7, #8
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fadd 	bl	80004ac <EXTI_Init>

// Configuration NVIC

	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
 8000ef2:	2306      	movs	r3, #6
 8000ef4:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x02;
 8000efa:	2302      	movs	r3, #2
 8000efc:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000efe:	2301      	movs	r3, #1
 8000f00:	71fb      	strb	r3, [r7, #7]

	NVIC_Init(&NVIC_InitStructure);
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fa6f 	bl	80003e8 <NVIC_Init>
}
 8000f0a:	bf00      	nop
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40020400 	.word	0x40020400

08000f18 <interruptPB3_Init>:
 * @func   interruptPB3_Init
 * @brief  Init Interrupt
 * @param  None
 * @retval None
 */
static void_t interruptPB3_Init(void_t) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	EXTI_InitTypeDef EXTI_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

// Enable Clock Port C;
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000f1e:	2101      	movs	r1, #1
 8000f20:	2002      	movs	r0, #2
 8000f22:	f7ff fcd5 	bl	80008d0 <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000f26:	2300      	movs	r3, #0
 8000f28:	753b      	strb	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Pin = BUTTONB2_GPIO_PIN;
 8000f2a:	2308      	movs	r3, #8
 8000f2c:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	757b      	strb	r3, [r7, #21]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	75fb      	strb	r3, [r7, #23]

	GPIO_Init(BUTTONB2_GPIO_PORT, &GPIO_InitStructure);
 8000f36:	f107 0310 	add.w	r3, r7, #16
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4814      	ldr	r0, [pc, #80]	; (8000f90 <interruptPB3_Init+0x78>)
 8000f3e:	f7ff fb51 	bl	80005e4 <GPIO_Init>

//  Enable Clock Syscfg, Connect EXTI Line 3 to PB3 pin

	RCC_APB2PeriphClockCmd(SYSFG_Clock, ENABLE);
 8000f42:	2101      	movs	r1, #1
 8000f44:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f48:	f7ff fce2 	bl	8000910 <RCC_APB2PeriphClockCmd>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource3);
 8000f4c:	2103      	movs	r1, #3
 8000f4e:	2001      	movs	r0, #1
 8000f50:	f7ff fcfe 	bl	8000950 <SYSCFG_EXTILineConfig>

//	Configuration Interrupt

	EXTI_InitStructure.EXTI_Line = EXTI_Line3;
 8000f54:	2308      	movs	r3, #8
 8000f56:	60bb      	str	r3, [r7, #8]

	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	733b      	strb	r3, [r7, #12]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
 8000f5c:	2310      	movs	r3, #16
 8000f5e:	737b      	strb	r3, [r7, #13]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000f60:	2301      	movs	r3, #1
 8000f62:	73bb      	strb	r3, [r7, #14]
	EXTI_Init(&EXTI_InitStructure);
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fa9f 	bl	80004ac <EXTI_Init>

// Configuration NVIC

	NVIC_InitStructure.NVIC_IRQChannel = EXTI3_IRQn;
 8000f6e:	2309      	movs	r3, #9
 8000f70:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8000f72:	2301      	movs	r3, #1
 8000f74:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
 8000f76:	2301      	movs	r3, #1
 8000f78:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	71fb      	strb	r3, [r7, #7]

	NVIC_Init(&NVIC_InitStructure);
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fa31 	bl	80003e8 <NVIC_Init>
}
 8000f86:	bf00      	nop
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40020400 	.word	0x40020400

08000f94 <EXTI4_IRQHandler>:
 * @func   EXTI4_IRQHandler
 * @brief  Interrupt line 4
 * @param  None
 * @retval None
 */
void_t EXTI4_IRQHandler(void_t) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	if (EXTI_GetFlagStatus(EXTI_Line4) == SET) {
 8000f98:	2010      	movs	r0, #16
 8000f9a:	f7ff faf9 	bl	8000590 <EXTI_GetFlagStatus>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d112      	bne.n	8000fca <EXTI4_IRQHandler+0x36>
		if (GPIO_ReadInputDataBit(BUTTONB3_GPIO_PORT,BUTTONB3_GPIO_PIN)== GPIO_PIN_RESET) {
 8000fa4:	2110      	movs	r1, #16
 8000fa6:	480b      	ldr	r0, [pc, #44]	; (8000fd4 <EXTI4_IRQHandler+0x40>)
 8000fa8:	f7ff fbab 	bl	8000702 <GPIO_ReadInputDataBit>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d105      	bne.n	8000fbe <EXTI4_IRQHandler+0x2a>
			dwStartTimerB3 = GetMilSecTick();	// Lưu thời gian nhấn nút
 8000fb2:	f7ff fe05 	bl	8000bc0 <GetMilSecTick>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <EXTI4_IRQHandler+0x44>)
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	e005      	b.n	8000fca <EXTI4_IRQHandler+0x36>
		}
		else
		{
			byStatus++;						// Khi nhả nút thì biến tăng
 8000fbe:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <EXTI4_IRQHandler+0x48>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <EXTI4_IRQHandler+0x48>)
 8000fc8:	701a      	strb	r2, [r3, #0]
		}
	}
	//xóa cờ ngắt sau khi thực hiện xong chương trình ngắt.
	EXTI_ClearITPendingBit(EXTI_Line4);
 8000fca:	2010      	movs	r0, #16
 8000fcc:	f7ff fafa 	bl	80005c4 <EXTI_ClearITPendingBit>
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	200001d0 	.word	0x200001d0
 8000fdc:	200001cc 	.word	0x200001cc

08000fe0 <EXTI3_IRQHandler>:
 * @func   EXTI3_IRQHandler
 * @brief  Interrupt line 3
 * @param  None
 * @retval None
 */
void_t EXTI3_IRQHandler(void_t) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	if (EXTI_GetFlagStatus(EXTI_Line3) == SET) {
 8000fe4:	2008      	movs	r0, #8
 8000fe6:	f7ff fad3 	bl	8000590 <EXTI_GetFlagStatus>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d11c      	bne.n	800102a <EXTI3_IRQHandler+0x4a>

		if (GPIO_ReadInputDataBit(BUTTONB2_GPIO_PORT,BUTTONB2_GPIO_PIN)== GPIO_PIN_RESET) {
 8000ff0:	2108      	movs	r1, #8
 8000ff2:	4810      	ldr	r0, [pc, #64]	; (8001034 <EXTI3_IRQHandler+0x54>)
 8000ff4:	f7ff fb85 	bl	8000702 <GPIO_ReadInputDataBit>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10d      	bne.n	800101a <EXTI3_IRQHandler+0x3a>
			buttonB2.State = BUTTON_PRESSED;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <EXTI3_IRQHandler+0x58>)
 8001000:	2201      	movs	r2, #1
 8001002:	701a      	strb	r2, [r3, #0]
			buttonB2.timePress = GetMilSecTick();
 8001004:	f7ff fddc 	bl	8000bc0 <GetMilSecTick>
 8001008:	4603      	mov	r3, r0
 800100a:	4a0b      	ldr	r2, [pc, #44]	; (8001038 <EXTI3_IRQHandler+0x58>)
 800100c:	6053      	str	r3, [r2, #4]
			buttonB2.Count++;
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <EXTI3_IRQHandler+0x58>)
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	3301      	adds	r3, #1
 8001014:	4a08      	ldr	r2, [pc, #32]	; (8001038 <EXTI3_IRQHandler+0x58>)
 8001016:	60d3      	str	r3, [r2, #12]
 8001018:	e007      	b.n	800102a <EXTI3_IRQHandler+0x4a>
		} else {

			buttonB2.timeReleased = GetMilSecTick();
 800101a:	f7ff fdd1 	bl	8000bc0 <GetMilSecTick>
 800101e:	4603      	mov	r3, r0
 8001020:	4a05      	ldr	r2, [pc, #20]	; (8001038 <EXTI3_IRQHandler+0x58>)
 8001022:	6093      	str	r3, [r2, #8]
			buttonB2.State = BUTTON_RELEASED;
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <EXTI3_IRQHandler+0x58>)
 8001026:	2202      	movs	r2, #2
 8001028:	701a      	strb	r2, [r3, #0]
		}
	}
	//xóa cờ ngắt sau khi thực hiện xong chương trình ngắt.
	EXTI_ClearITPendingBit(EXTI_Line3);
 800102a:	2008      	movs	r0, #8
 800102c:	f7ff faca 	bl	80005c4 <EXTI_ClearITPendingBit>
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40020400 	.word	0x40020400
 8001038:	200001e4 	.word	0x200001e4

0800103c <EXTI0_IRQHandler>:
 * @func   EXTI0_IRQHandler
 * @brief  Interrupt line 0
 * @param  None
 * @retval None
 */
void_t EXTI0_IRQHandler(void_t) {
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	if (EXTI_GetFlagStatus(EXTI_Line0) == SET) {
 8001040:	2001      	movs	r0, #1
 8001042:	f7ff faa5 	bl	8000590 <EXTI_GetFlagStatus>
 8001046:	4603      	mov	r3, r0
 8001048:	2b01      	cmp	r3, #1
 800104a:	d11c      	bne.n	8001086 <EXTI0_IRQHandler+0x4a>
		if (GPIO_ReadInputDataBit(BUTTONB4_GPIO_PORT,BUTTONB4_GPIO_PIN)== GPIO_PIN_RESET) {
 800104c:	2101      	movs	r1, #1
 800104e:	4810      	ldr	r0, [pc, #64]	; (8001090 <EXTI0_IRQHandler+0x54>)
 8001050:	f7ff fb57 	bl	8000702 <GPIO_ReadInputDataBit>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d10d      	bne.n	8001076 <EXTI0_IRQHandler+0x3a>
			buttonB4.State = BUTTON_PRESSED;
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <EXTI0_IRQHandler+0x58>)
 800105c:	2201      	movs	r2, #1
 800105e:	701a      	strb	r2, [r3, #0]
			buttonB4.timePress = GetMilSecTick();
 8001060:	f7ff fdae 	bl	8000bc0 <GetMilSecTick>
 8001064:	4603      	mov	r3, r0
 8001066:	4a0b      	ldr	r2, [pc, #44]	; (8001094 <EXTI0_IRQHandler+0x58>)
 8001068:	6053      	str	r3, [r2, #4]
			buttonB4.Count++;
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <EXTI0_IRQHandler+0x58>)
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	3301      	adds	r3, #1
 8001070:	4a08      	ldr	r2, [pc, #32]	; (8001094 <EXTI0_IRQHandler+0x58>)
 8001072:	60d3      	str	r3, [r2, #12]
 8001074:	e007      	b.n	8001086 <EXTI0_IRQHandler+0x4a>
		} else {
			buttonB4.timeReleased = GetMilSecTick();
 8001076:	f7ff fda3 	bl	8000bc0 <GetMilSecTick>
 800107a:	4603      	mov	r3, r0
 800107c:	4a05      	ldr	r2, [pc, #20]	; (8001094 <EXTI0_IRQHandler+0x58>)
 800107e:	6093      	str	r3, [r2, #8]
			buttonB4.State = BUTTON_RELEASED;
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <EXTI0_IRQHandler+0x58>)
 8001082:	2202      	movs	r2, #2
 8001084:	701a      	strb	r2, [r3, #0]
		}
	}
	//xóa cờ ngắt sau khi thực hiện xong chương trình ngắt.
	EXTI_ClearITPendingBit(EXTI_Line0);
 8001086:	2001      	movs	r0, #1
 8001088:	f7ff fa9c 	bl	80005c4 <EXTI_ClearITPendingBit>
}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40020400 	.word	0x40020400
 8001094:	200001d4 	.word	0x200001d4

08001098 <ledControlStatus>:
 * @brief  set status LED
 * @param  None
 * @retval None
 */
static void_t ledControlStatus(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN,
		u8_t byStatus) {
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	807b      	strh	r3, [r7, #2]
 80010a4:	4613      	mov	r3, r2
 80010a6:	707b      	strb	r3, [r7, #1]
	// SET bit in BSRR Registers

	if (byStatus == GPIO_PIN_SET) {
 80010a8:	787b      	ldrb	r3, [r7, #1]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d102      	bne.n	80010b4 <ledControlStatus+0x1c>
		GPIOx->BSRRL = GPIO_PIN;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	887a      	ldrh	r2, [r7, #2]
 80010b2:	831a      	strh	r2, [r3, #24]
	}
	if (byStatus == GPIO_PIN_RESET) {
 80010b4:	787b      	ldrb	r3, [r7, #1]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d102      	bne.n	80010c0 <ledControlStatus+0x28>
		GPIOx->BSRRH = GPIO_PIN;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	887a      	ldrh	r2, [r7, #2]
 80010be:	835a      	strh	r2, [r3, #26]
	}
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <buzzerControlSetBeep>:
 * @brief  set status buzzer
 * @param  None
 * @retval None
 */
static void_t buzzerControlSetBeep(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN,
		u32_t num) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	460b      	mov	r3, r1
 80010d6:	607a      	str	r2, [r7, #4]
 80010d8:	817b      	strh	r3, [r7, #10]
	for (u32_t i = 0; i < num; i++) {
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	e012      	b.n	8001106 <buzzerControlSetBeep+0x3a>
		GPIO_SetBits(GPIOx, GPIO_PIN);
 80010e0:	897b      	ldrh	r3, [r7, #10]
 80010e2:	4619      	mov	r1, r3
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	f7ff fb26 	bl	8000736 <GPIO_SetBits>
		delay_ms(200);
 80010ea:	20c8      	movs	r0, #200	; 0xc8
 80010ec:	f7ff fe4e 	bl	8000d8c <delay_ms>
		GPIO_ResetBits(GPIOx, GPIO_PIN);
 80010f0:	897b      	ldrh	r3, [r7, #10]
 80010f2:	4619      	mov	r1, r3
 80010f4:	68f8      	ldr	r0, [r7, #12]
 80010f6:	f7ff fb2d 	bl	8000754 <GPIO_ResetBits>
		delay_ms(200);
 80010fa:	20c8      	movs	r0, #200	; 0xc8
 80010fc:	f7ff fe46 	bl	8000d8c <delay_ms>
	for (u32_t i = 0; i < num; i++) {
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	3301      	adds	r3, #1
 8001104:	617b      	str	r3, [r7, #20]
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	429a      	cmp	r2, r3
 800110c:	d3e8      	bcc.n	80010e0 <buzzerControlSetBeep+0x14>
	}
}
 800110e:	bf00      	nop
 8001110:	bf00      	nop
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <calculatorTime>:
 * @func   calculatorTime
 * @brief  Caculator time button
 * @param  None
 * @retval None
 */
static u32_t calculatorTime(u32_t dwTimeInit, u32_t dwTimeCurrent) {
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
	u32_t dwTimeTotal;
	if (dwTimeCurrent >= dwTimeInit) {
 8001122:	683a      	ldr	r2, [r7, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	429a      	cmp	r2, r3
 8001128:	d304      	bcc.n	8001134 <calculatorTime+0x1c>
		dwTimeTotal = dwTimeCurrent - dwTimeInit;
 800112a:	683a      	ldr	r2, [r7, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	e004      	b.n	800113e <calculatorTime+0x26>
	} else {
		dwTimeTotal = 0xFFFFFFFFU + dwTimeCurrent - dwTimeInit;
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	3b01      	subs	r3, #1
 800113c:	60fb      	str	r3, [r7, #12]
	}
	return dwTimeTotal;
 800113e:	68fb      	ldr	r3, [r7, #12]

}
 8001140:	4618      	mov	r0, r3
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <toggleLed_5Times>:
 * @func   toggleLed_5Times
 * @brief  Toggle led number times
 * @param  None
 * @retval None
 */
static void_t toggleLed_5Times(void_t) {
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b083      	sub	sp, #12
 8001150:	af02      	add	r7, sp, #8
	if (byStatus == 5) {
 8001152:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <toggleLed_5Times+0x64>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b05      	cmp	r3, #5
 8001158:	d115      	bne.n	8001186 <toggleLed_5Times+0x3a>
		delay_ms(200);
 800115a:	20c8      	movs	r0, #200	; 0xc8
 800115c:	f7ff fe16 	bl	8000d8c <delay_ms>
		blinkLedStatusPower(LEDGREEN1_GPIO_PORT, LEDGREEN1_GPIO_PIN,
 8001160:	2305      	movs	r3, #5
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001168:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <toggleLed_5Times+0x68>)
 800116a:	2101      	movs	r1, #1
 800116c:	4811      	ldr	r0, [pc, #68]	; (80011b4 <toggleLed_5Times+0x68>)
 800116e:	f000 f827 	bl	80011c0 <blinkLedStatusPower>
		LEDGREEN2_GPIO_PORT, LEDGREEN2_GPIO_PIN, 5);
		buzzerControlSetBeep(BUZZER_GPIO_PORT, BUZZER_GPIO_PIN, 2);
 8001172:	2202      	movs	r2, #2
 8001174:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001178:	480f      	ldr	r0, [pc, #60]	; (80011b8 <toggleLed_5Times+0x6c>)
 800117a:	f7ff ffa7 	bl	80010cc <buzzerControlSetBeep>
		byStatus = 0;
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <toggleLed_5Times+0x64>)
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
		if(calculatorTime(dwStartTimerB3, GetMilSecTick()) > PRESS_TIMEOUT) //
		{
			byStatus = 0;
		}
	}
}
 8001184:	e00f      	b.n	80011a6 <toggleLed_5Times+0x5a>
		if(calculatorTime(dwStartTimerB3, GetMilSecTick()) > PRESS_TIMEOUT) //
 8001186:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <toggleLed_5Times+0x70>)
 8001188:	681c      	ldr	r4, [r3, #0]
 800118a:	f7ff fd19 	bl	8000bc0 <GetMilSecTick>
 800118e:	4603      	mov	r3, r0
 8001190:	4619      	mov	r1, r3
 8001192:	4620      	mov	r0, r4
 8001194:	f7ff ffc0 	bl	8001118 <calculatorTime>
 8001198:	4603      	mov	r3, r0
 800119a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800119e:	d902      	bls.n	80011a6 <toggleLed_5Times+0x5a>
			byStatus = 0;
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <toggleLed_5Times+0x64>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
}
 80011a6:	bf00      	nop
 80011a8:	3704      	adds	r7, #4
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd90      	pop	{r4, r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200001cc 	.word	0x200001cc
 80011b4:	40020000 	.word	0x40020000
 80011b8:	40020800 	.word	0x40020800
 80011bc:	200001d0 	.word	0x200001d0

080011c0 <blinkLedStatusPower>:
 * @brief  Led blink
 * @param  None
 * @retval None
 */
static void_t blinkLedStatusPower(GPIO_TypeDef *GPIOx1, uint16_t GPIO_PIN_ID1,
		GPIO_TypeDef *GPIOx2, uint16_t GPIO_PIN_ID2, u32_t num) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	461a      	mov	r2, r3
 80011cc:	460b      	mov	r3, r1
 80011ce:	817b      	strh	r3, [r7, #10]
 80011d0:	4613      	mov	r3, r2
 80011d2:	813b      	strh	r3, [r7, #8]
	for (u32_t i = 0; i < num; i++) {
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	e020      	b.n	800121c <blinkLedStatusPower+0x5c>
		ledControlStatus(GPIOx1, GPIO_PIN_ID1, GPIO_PIN_HIGH);
 80011da:	897b      	ldrh	r3, [r7, #10]
 80011dc:	2201      	movs	r2, #1
 80011de:	4619      	mov	r1, r3
 80011e0:	68f8      	ldr	r0, [r7, #12]
 80011e2:	f7ff ff59 	bl	8001098 <ledControlStatus>
		ledControlStatus(GPIOx2, GPIO_PIN_ID2, GPIO_PIN_HIGH);
 80011e6:	893b      	ldrh	r3, [r7, #8]
 80011e8:	2201      	movs	r2, #1
 80011ea:	4619      	mov	r1, r3
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ff53 	bl	8001098 <ledControlStatus>
		delay_ms(100);
 80011f2:	2064      	movs	r0, #100	; 0x64
 80011f4:	f7ff fdca 	bl	8000d8c <delay_ms>
		ledControlStatus(GPIOx1, GPIO_PIN_ID1, GPIO_PIN_LOW);
 80011f8:	897b      	ldrh	r3, [r7, #10]
 80011fa:	2200      	movs	r2, #0
 80011fc:	4619      	mov	r1, r3
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f7ff ff4a 	bl	8001098 <ledControlStatus>
		ledControlStatus(GPIOx2, GPIO_PIN_ID2, GPIO_PIN_LOW);
 8001204:	893b      	ldrh	r3, [r7, #8]
 8001206:	2200      	movs	r2, #0
 8001208:	4619      	mov	r1, r3
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ff44 	bl	8001098 <ledControlStatus>
		delay_ms(100);
 8001210:	2064      	movs	r0, #100	; 0x64
 8001212:	f7ff fdbb 	bl	8000d8c <delay_ms>
	for (u32_t i = 0; i < num; i++) {
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	3301      	adds	r3, #1
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	697a      	ldr	r2, [r7, #20]
 800121e:	6a3b      	ldr	r3, [r7, #32]
 8001220:	429a      	cmp	r2, r3
 8001222:	d3da      	bcc.n	80011da <blinkLedStatusPower+0x1a>
	}
}
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <LedControl_TimPressRealease>:
 * @brief  Control led with state button
 * @param  None
 * @retval None
 */

static void_t LedControl_TimPressRealease(void_t) {
 8001230:	b598      	push	{r3, r4, r7, lr}
 8001232:	af00      	add	r7, sp, #0
//	BUTTON B2****************************************************************************************************
	// check holding button
	if (buttonB2.State == BUTTON_PRESSED) {
 8001234:	4b4f      	ldr	r3, [pc, #316]	; (8001374 <LedControl_TimPressRealease+0x144>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d115      	bne.n	8001268 <LedControl_TimPressRealease+0x38>
		if (calculatorTime(buttonB2.timePress, GetMilSecTick()) > PRESS_TIMEOUT) {
 800123c:	4b4d      	ldr	r3, [pc, #308]	; (8001374 <LedControl_TimPressRealease+0x144>)
 800123e:	685c      	ldr	r4, [r3, #4]
 8001240:	f7ff fcbe 	bl	8000bc0 <GetMilSecTick>
 8001244:	4603      	mov	r3, r0
 8001246:	4619      	mov	r1, r3
 8001248:	4620      	mov	r0, r4
 800124a:	f7ff ff65 	bl	8001118 <calculatorTime>
 800124e:	4603      	mov	r3, r0
 8001250:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001254:	d908      	bls.n	8001268 <LedControl_TimPressRealease+0x38>
			buttonB2.Count = 0;
 8001256:	4b47      	ldr	r3, [pc, #284]	; (8001374 <LedControl_TimPressRealease+0x144>)
 8001258:	2200      	movs	r2, #0
 800125a:	60da      	str	r2, [r3, #12]
			ledControlStatus(LEDBLUE2_GPIO_PORT, LEDBLUE2_GPIO_PIN,GPIO_PIN_HIGH);
 800125c:	2201      	movs	r2, #1
 800125e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001262:	4845      	ldr	r0, [pc, #276]	; (8001378 <LedControl_TimPressRealease+0x148>)
 8001264:	f7ff ff18 	bl	8001098 <ledControlStatus>
		}
	}

	// check release button
	if (buttonB2.State == BUTTON_RELEASED) {
 8001268:	4b42      	ldr	r3, [pc, #264]	; (8001374 <LedControl_TimPressRealease+0x144>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b02      	cmp	r3, #2
 800126e:	d130      	bne.n	80012d2 <LedControl_TimPressRealease+0xa2>

		ledControlStatus(LEDBLUE2_GPIO_PORT, LEDBLUE2_GPIO_PIN, GPIO_PIN_LOW);
 8001270:	2200      	movs	r2, #0
 8001272:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001276:	4840      	ldr	r0, [pc, #256]	; (8001378 <LedControl_TimPressRealease+0x148>)
 8001278:	f7ff ff0e 	bl	8001098 <ledControlStatus>
		if (buttonB2.Count == 1) {
 800127c:	4b3d      	ldr	r3, [pc, #244]	; (8001374 <LedControl_TimPressRealease+0x144>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d10f      	bne.n	80012a4 <LedControl_TimPressRealease+0x74>
				if (calculatorTime(buttonB2.timeReleased, GetMilSecTick()) > RELEASE_TIMEOUT)
 8001284:	4b3b      	ldr	r3, [pc, #236]	; (8001374 <LedControl_TimPressRealease+0x144>)
 8001286:	689c      	ldr	r4, [r3, #8]
 8001288:	f7ff fc9a 	bl	8000bc0 <GetMilSecTick>
 800128c:	4603      	mov	r3, r0
 800128e:	4619      	mov	r1, r3
 8001290:	4620      	mov	r0, r4
 8001292:	f7ff ff41 	bl	8001118 <calculatorTime>
 8001296:	4603      	mov	r3, r0
 8001298:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800129c:	d902      	bls.n	80012a4 <LedControl_TimPressRealease+0x74>
					buttonB2.Count = 0;
 800129e:	4b35      	ldr	r3, [pc, #212]	; (8001374 <LedControl_TimPressRealease+0x144>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	60da      	str	r2, [r3, #12]

		}
		if (buttonB2.Count == 2) {
 80012a4:	4b33      	ldr	r3, [pc, #204]	; (8001374 <LedControl_TimPressRealease+0x144>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d105      	bne.n	80012b8 <LedControl_TimPressRealease+0x88>
			ledControlStatus(LEDBLUE2_GPIO_PORT, LEDBLUE2_GPIO_PIN, GPIO_PIN_HIGH);
 80012ac:	2201      	movs	r2, #1
 80012ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012b2:	4831      	ldr	r0, [pc, #196]	; (8001378 <LedControl_TimPressRealease+0x148>)
 80012b4:	f7ff fef0 	bl	8001098 <ledControlStatus>
		}
		if (buttonB2.Count >= 3) {
 80012b8:	4b2e      	ldr	r3, [pc, #184]	; (8001374 <LedControl_TimPressRealease+0x144>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d908      	bls.n	80012d2 <LedControl_TimPressRealease+0xa2>
			ledControlStatus(LEDBLUE2_GPIO_PORT, LEDBLUE2_GPIO_PIN, GPIO_PIN_LOW);
 80012c0:	2200      	movs	r2, #0
 80012c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012c6:	482c      	ldr	r0, [pc, #176]	; (8001378 <LedControl_TimPressRealease+0x148>)
 80012c8:	f7ff fee6 	bl	8001098 <ledControlStatus>
			buttonB2.Count = 0;
 80012cc:	4b29      	ldr	r3, [pc, #164]	; (8001374 <LedControl_TimPressRealease+0x144>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
	if (buttonB2.State == NO_CLICK) {

	}

//BUTTON B4****************************************************************************************************
	if (buttonB4.State == BUTTON_PRESSED) {
 80012d2:	4b2a      	ldr	r3, [pc, #168]	; (800137c <LedControl_TimPressRealease+0x14c>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d115      	bne.n	8001306 <LedControl_TimPressRealease+0xd6>
		if (calculatorTime(buttonB4.timePress, GetMilSecTick()) > PRESS_TIMEOUT) {			// Kiểm tra xem nút có đang được giữ không
 80012da:	4b28      	ldr	r3, [pc, #160]	; (800137c <LedControl_TimPressRealease+0x14c>)
 80012dc:	685c      	ldr	r4, [r3, #4]
 80012de:	f7ff fc6f 	bl	8000bc0 <GetMilSecTick>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4619      	mov	r1, r3
 80012e6:	4620      	mov	r0, r4
 80012e8:	f7ff ff16 	bl	8001118 <calculatorTime>
 80012ec:	4603      	mov	r3, r0
 80012ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012f2:	d908      	bls.n	8001306 <LedControl_TimPressRealease+0xd6>
			buttonB4.Count = 0;
 80012f4:	4b21      	ldr	r3, [pc, #132]	; (800137c <LedControl_TimPressRealease+0x14c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
			ledControlStatus(LEDRED2_GPIO_PORT, LEDRED2_GPIO_PIN,GPIO_PIN_HIGH);
 80012fa:	2201      	movs	r2, #1
 80012fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001300:	481f      	ldr	r0, [pc, #124]	; (8001380 <LedControl_TimPressRealease+0x150>)
 8001302:	f7ff fec9 	bl	8001098 <ledControlStatus>
		}
	}
	if (buttonB4.State == BUTTON_RELEASED) {
 8001306:	4b1d      	ldr	r3, [pc, #116]	; (800137c <LedControl_TimPressRealease+0x14c>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b02      	cmp	r3, #2
 800130c:	d130      	bne.n	8001370 <LedControl_TimPressRealease+0x140>

		ledControlStatus(LEDRED2_GPIO_PORT, LEDRED2_GPIO_PIN, GPIO_PIN_LOW);
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001314:	481a      	ldr	r0, [pc, #104]	; (8001380 <LedControl_TimPressRealease+0x150>)
 8001316:	f7ff febf 	bl	8001098 <ledControlStatus>
		if (buttonB4.Count == 1) {
 800131a:	4b18      	ldr	r3, [pc, #96]	; (800137c <LedControl_TimPressRealease+0x14c>)
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d10f      	bne.n	8001342 <LedControl_TimPressRealease+0x112>
				if (calculatorTime(buttonB4.timeReleased, GetMilSecTick()) > RELEASE_TIMEOUT)  // Kiểm tra khoảng thời gian giữa 2 lần nhấn nút
 8001322:	4b16      	ldr	r3, [pc, #88]	; (800137c <LedControl_TimPressRealease+0x14c>)
 8001324:	689c      	ldr	r4, [r3, #8]
 8001326:	f7ff fc4b 	bl	8000bc0 <GetMilSecTick>
 800132a:	4603      	mov	r3, r0
 800132c:	4619      	mov	r1, r3
 800132e:	4620      	mov	r0, r4
 8001330:	f7ff fef2 	bl	8001118 <calculatorTime>
 8001334:	4603      	mov	r3, r0
 8001336:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800133a:	d902      	bls.n	8001342 <LedControl_TimPressRealease+0x112>
					buttonB4.Count = 0;
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <LedControl_TimPressRealease+0x14c>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
		}
		if (buttonB4.Count == 2) {
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <LedControl_TimPressRealease+0x14c>)
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	2b02      	cmp	r3, #2
 8001348:	d105      	bne.n	8001356 <LedControl_TimPressRealease+0x126>
			ledControlStatus(LEDRED2_GPIO_PORT, LEDRED2_GPIO_PIN, GPIO_PIN_HIGH);
 800134a:	2201      	movs	r2, #1
 800134c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001350:	480b      	ldr	r0, [pc, #44]	; (8001380 <LedControl_TimPressRealease+0x150>)
 8001352:	f7ff fea1 	bl	8001098 <ledControlStatus>
		}
		if (buttonB4.Count >= 3) {
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <LedControl_TimPressRealease+0x14c>)
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	2b02      	cmp	r3, #2
 800135c:	d908      	bls.n	8001370 <LedControl_TimPressRealease+0x140>
			ledControlStatus(LEDRED2_GPIO_PORT, LEDRED2_GPIO_PIN, GPIO_PIN_LOW);
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001364:	4806      	ldr	r0, [pc, #24]	; (8001380 <LedControl_TimPressRealease+0x150>)
 8001366:	f7ff fe97 	bl	8001098 <ledControlStatus>
			buttonB4.Count = 0;
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <LedControl_TimPressRealease+0x14c>)
 800136c:	2200      	movs	r2, #0
 800136e:	60da      	str	r2, [r3, #12]
		}
	}
	if (buttonB4.State == NO_CLICK) {

	}
}
 8001370:	bf00      	nop
 8001372:	bd98      	pop	{r3, r4, r7, pc}
 8001374:	200001e4 	.word	0x200001e4
 8001378:	40020000 	.word	0x40020000
 800137c:	200001d4 	.word	0x200001d4
 8001380:	40020400 	.word	0x40020400

08001384 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001384:	480d      	ldr	r0, [pc, #52]	; (80013bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001386:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001388:	f7fe ff24 	bl	80001d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800138c:	480c      	ldr	r0, [pc, #48]	; (80013c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800138e:	490d      	ldr	r1, [pc, #52]	; (80013c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001390:	4a0d      	ldr	r2, [pc, #52]	; (80013c8 <LoopForever+0xe>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001394:	e002      	b.n	800139c <LoopCopyDataInit>

08001396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800139a:	3304      	adds	r3, #4

0800139c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800139c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a0:	d3f9      	bcc.n	8001396 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013a2:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80013a4:	4c0a      	ldr	r4, [pc, #40]	; (80013d0 <LoopForever+0x16>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a8:	e001      	b.n	80013ae <LoopFillZerobss>

080013aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013ac:	3204      	adds	r2, #4

080013ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b0:	d3fb      	bcc.n	80013aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013b2:	f000 f811 	bl	80013d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013b6:	f7ff fcc5 	bl	8000d44 <main>

080013ba <LoopForever>:

LoopForever:
    b LoopForever
 80013ba:	e7fe      	b.n	80013ba <LoopForever>
  ldr   r0, =_estack
 80013bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80013c8:	08001440 	.word	0x08001440
  ldr r2, =_sbss
 80013cc:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80013d0:	200001f4 	.word	0x200001f4

080013d4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013d4:	e7fe      	b.n	80013d4 <ADC_IRQHandler>
	...

080013d8 <__libc_init_array>:
 80013d8:	b570      	push	{r4, r5, r6, lr}
 80013da:	4d0d      	ldr	r5, [pc, #52]	; (8001410 <__libc_init_array+0x38>)
 80013dc:	4c0d      	ldr	r4, [pc, #52]	; (8001414 <__libc_init_array+0x3c>)
 80013de:	1b64      	subs	r4, r4, r5
 80013e0:	10a4      	asrs	r4, r4, #2
 80013e2:	2600      	movs	r6, #0
 80013e4:	42a6      	cmp	r6, r4
 80013e6:	d109      	bne.n	80013fc <__libc_init_array+0x24>
 80013e8:	4d0b      	ldr	r5, [pc, #44]	; (8001418 <__libc_init_array+0x40>)
 80013ea:	4c0c      	ldr	r4, [pc, #48]	; (800141c <__libc_init_array+0x44>)
 80013ec:	f000 f818 	bl	8001420 <_init>
 80013f0:	1b64      	subs	r4, r4, r5
 80013f2:	10a4      	asrs	r4, r4, #2
 80013f4:	2600      	movs	r6, #0
 80013f6:	42a6      	cmp	r6, r4
 80013f8:	d105      	bne.n	8001406 <__libc_init_array+0x2e>
 80013fa:	bd70      	pop	{r4, r5, r6, pc}
 80013fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001400:	4798      	blx	r3
 8001402:	3601      	adds	r6, #1
 8001404:	e7ee      	b.n	80013e4 <__libc_init_array+0xc>
 8001406:	f855 3b04 	ldr.w	r3, [r5], #4
 800140a:	4798      	blx	r3
 800140c:	3601      	adds	r6, #1
 800140e:	e7f2      	b.n	80013f6 <__libc_init_array+0x1e>
 8001410:	08001438 	.word	0x08001438
 8001414:	08001438 	.word	0x08001438
 8001418:	08001438 	.word	0x08001438
 800141c:	0800143c 	.word	0x0800143c

08001420 <_init>:
 8001420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001422:	bf00      	nop
 8001424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001426:	bc08      	pop	{r3}
 8001428:	469e      	mov	lr, r3
 800142a:	4770      	bx	lr

0800142c <_fini>:
 800142c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800142e:	bf00      	nop
 8001430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001432:	bc08      	pop	{r3}
 8001434:	469e      	mov	lr, r3
 8001436:	4770      	bx	lr
